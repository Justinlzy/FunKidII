package com.cqkct.FunKidII.db.Entity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import android.support.annotation.Nullable;
import android.text.TextUtils;

import com.cqkct.FunKidII.Bean.BaseBean;
import com.cqkct.FunKidII.Utils.L;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.Keep;
import org.greenrobot.greendao.annotation.NotNull;

import java.io.Serializable;

import protocol.Message;

/**
 * Entity mapped to table CONTACT_BEAN.
 */

@Entity
public class ContactEntity implements BaseBean, Serializable {

    private static final long serialVersionUID = 5211885378091444303L;
    @Id(autoincrement = true)
    private Long id;
    @NotNull
    private String deviceId;

    // 绑定关系的联系人
    private String userId;
    private int permission;
    private String relation;
    private String userAvatar; // 自定义关系头像

    // 普通联系人
    private String contactId;

    // 手表好友联系人
    private String friendDeviceId;
    // 好友ID
    private String friendId;
    // 好友昵称
    private String friendNickname;
    // 好友设备的宝贝头像
    private String friendBabyAvatar;

    @NotNull
    private String name;
    @NotNull
    private String number;

    // 亲情短号
    private String familyShortNum;

    private boolean synced;

    public static final int TYPE_NONE = 0;
    public static final int TYPE_NORMAL = 1;
    public static final int TYPE_ASSOC = 2;
    public static final int TYPE_FRIEND = 3;


    // KEEP METHODS - put your custom methods here
    @Keep
    public ContactEntity(long id) {
        this.id = id;
    }

    @Generated(hash = 1650044250)
    public ContactEntity(Long id, @NotNull String deviceId, String userId, int permission,
            String relation, String userAvatar, String contactId, String friendDeviceId,
            String friendId, String friendNickname, String friendBabyAvatar, @NotNull String name,
            @NotNull String number, String familyShortNum, boolean synced) {
        this.id = id;
        this.deviceId = deviceId;
        this.userId = userId;
        this.permission = permission;
        this.relation = relation;
        this.userAvatar = userAvatar;
        this.contactId = contactId;
        this.friendDeviceId = friendDeviceId;
        this.friendId = friendId;
        this.friendNickname = friendNickname;
        this.friendBabyAvatar = friendBabyAvatar;
        this.name = name;
        this.number = number;
        this.familyShortNum = familyShortNum;
        this.synced = synced;
    }

    @Generated(hash = 393979869)
    public ContactEntity() {
    }

    @Override
    @Keep
    public Long getId() {
        return id;
    }
    @Keep
    public int getType() {
        if (!TextUtils.isEmpty(getContactId())) {
            return TYPE_NORMAL;
        }
        if (!TextUtils.isEmpty(getUserId())) {
            return TYPE_ASSOC;
        }
        if (!TextUtils.isEmpty(getFriendId()))
            return TYPE_FRIEND;
        return TYPE_NONE;
    }
    @Keep
    public @Nullable Message.UsrDevAssoc getUsrDevAssoc() {
        if (getType() != TYPE_ASSOC) {
            return null;
        }
        try {
            Message.UsrDevAssoc.Builder builder = Message.UsrDevAssoc.newBuilder()
                    .setDeviceId(getDeviceId())
                    .setUserId(getUserId())
                    .setPermissionValue(getPermission());
            if (getRelation() != null) {
                builder.setRelation(getRelation());
            }
            if (getUserAvatar() != null) {
                builder.setAvatar(getUserAvatar());
            }
            return builder.build();
        } catch (Exception e) {
            L.w("ContactEntity", "getUsrDevAssoc", e);
            return null;
        }
    }
    @Keep
    public @Nullable Message.Friend getFriend() {
        if (getType() != TYPE_FRIEND) {
            return null;
        }
        try {
            return Message.Friend.newBuilder()
                    .setId(getFriendId())
                    .setDeviceId(getDeviceId())
                    .setPeerDeviceId(getFriendDeviceId())
                    .setPeerBabyName(getName())
                    .setPeerTelNum(getNumber())
                    .setPeerNickname(getFriendNickname())
                    .setPeerFamilyShortNum(getFamilyShortNum())
                    .build();
        } catch (Exception e) {
            L.w("ContactEntity", "getFriend", e);
            return null;
        }
    }
    @Keep
    public Message.Contact toContact() {
        Message.Contact.Builder builder = Message.Contact.newBuilder()
                .setName(getName())
                .setNumber(getNumber())
                .setDevSynced(getSynced());
        if (getType() == TYPE_ASSOC) {
            builder.setUsrDevAssoc(getUsrDevAssoc());
        }
        if (getContactId() != null) {
            builder.setId(getContactId());
        }
        if (getFriendDeviceId() != null) {
            builder.setFriendDeviceId(getFriendDeviceId());
        }
        if (getFriendId() != null) {
            builder.setFriendId(getFriendId());
        }
        if (getFriendNickname() != null) {
            builder.setFriendNickname(getFriendNickname());
        }
        if (getFamilyShortNum() != null) {
            builder.setFamilyShortNum(getFamilyShortNum());
        }
        return builder.build();
    }
    // KEEP METHODS END

    public void setId(Long id) {
        this.id = id;
    }

    public String getDeviceId() {
        return this.deviceId;
    }

    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public int getPermission() {
        return this.permission;
    }

    public void setPermission(int permission) {
        this.permission = permission;
    }

    public String getRelation() {
        return this.relation;
    }

    public void setRelation(String relation) {
        this.relation = relation;
    }

    public String getUserAvatar() {
        return this.userAvatar;
    }

    public void setUserAvatar(String userAvatar) {
        this.userAvatar = userAvatar;
    }

    public String getContactId() {
        return this.contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public String getFriendDeviceId() {
        return this.friendDeviceId;
    }

    public void setFriendDeviceId(String friendDeviceId) {
        this.friendDeviceId = friendDeviceId;
    }

    public String getFriendId() {
        return this.friendId;
    }

    public void setFriendId(String friendId) {
        this.friendId = friendId;
    }

    public String getFriendNickname() {
        return this.friendNickname;
    }

    public void setFriendNickname(String friendNickname) {
        this.friendNickname = friendNickname;
    }

    public String getFriendBabyAvatar() {
        return this.friendBabyAvatar;
    }

    public void setFriendBabyAvatar(String friendBabyAvatar) {
        this.friendBabyAvatar = friendBabyAvatar;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNumber() {
        return this.number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getFamilyShortNum() {
        return this.familyShortNum;
    }

    public void setFamilyShortNum(String familyShortNum) {
        this.familyShortNum = familyShortNum;
    }

    public boolean getSynced() {
        return this.synced;
    }

    public void setSynced(boolean synced) {
        this.synced = synced;
    }

}
