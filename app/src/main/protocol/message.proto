syntax = "proto3";

package protocol;


// 错误码
enum ErrorCode {
    // 成功或收到消息
    SUCCESS                  = 0;
    // 普通失败，比如操作数据库失败等
    FAILURE                  = 1;
    // 无效参数
    INVALID_PARAM            = 2;
    // 未实现
    NOT_IMPLEMENTED          = 3;
    // 已废弃
    DEPRECATED               = 4;
    // 无权限（用户无权限访问资源）
    NO_PERMISSION            = 5;
    // 鉴权失败（使用的第三方资源需要鉴权，但鉴权失败）
    EAUTH                    = 6;
    // 不允许（可能是某些条件还未达到）
    NOT_ALLOWED              = 7;
    // 不存在
    NOT_EXISTS               = 8;
    // 已存在
    ALREADY_EXISTS           = 9;
    // 设备不存在
    NO_DEVICE                = 10;
    // 用户不存在
    NO_USER                  = 11;
    // 用户名或密码错误
    USER_OR_PASSWD_WRONG     = 12;
    // 用户旧密码错误 （主要用在修改密码处）
    OLD_PASSWD_WRONG         = 13;
    // 无效会话（例如登录接口中 session_id 已无效）
    INVALID_SESSION          = 14;
    // 不兼容 （已不再兼容此版本的应用，需要升级）
    NOT_COMPAT               = 15;
    // 离线
    OFFLINE                  = 16;
    // 已被取消
    ALREADY_CANCELED         = 17;
    // 正在处理
    IN_PROGRESS              = 18;
    // 已过期
    EXPIRED                  = 19;
    // 已结束
    ALREADY_FINISH           = 20;
    // 为空
    IS_EMPTY                 = 21;
    // 已满
    IS_FULL                  = 22;
    // 数据冲突（客户端可能需要重新拉取数据）
    DATA_CONFLICT            = 23;
    // 超出限制
    OUT_OF_LIMIT             = 24;
    // 已经关联该内容
    ALREADY_ASSOC            = 25;
    // 已关联其他内容
    ALREADY_ASSOC_OTHER      = 26;
    // 已关联其他用户
    ALREADY_ASSOC_OTHER_USER = 27;
    // 对方不支持
    PEER_NOT_SUPPORTED       = 28;
    // 聊天群组不存在
    NO_CHAT_GROUP            = 29;
    // 未激活
    INACTIVATED              = 30;

    TIMEOUT = 10000;
}

/******************************** 通用结构 Begin ********************************/

// 时间点
message TimePoint {
    // Epoch (注意，是 UTC，不是 localtime)
    int64 time = 1;

    // 时钟事件重复的 bitmask 常量
    enum RepeatFlag {
        NONE    = 0;
        SUN     = 0x01;
        MON     = 0x02;
        TUE     = 0x04;
        WED     = 0x08;
        THU     = 0x10;
        FRI     = 0x20;
        SAT     = 0x40;
        ALL     = 0x7F;
    }
}

// 时区
message Timezone {
    // 时区。采用 ISO 8601 时区部分的表示方式。 如 "+08:00:00", "+08:00", "+080000", "+0800", "+08")
    string zone = 1;
}



// 手机信息
message PhoneInfo {
    // 手机厂商（比如 Apple，Samsung）
    string          vender      = 1;
    // 手机型号（比如 iPhone 5s、Samsung galaxy s8，以机器上取到的实际值为准）
    string          model       = 2;

    // 操作系统类型
    enum OsType {
        UNKNOWN = 0;
        iOS = 1;
        Android = 2;
        WinPhone = 3;
    }
    // 操作系统类型
    OsType          os_type     = 3;

    // 操作系统名称（比如 Android、iOS）
    string          os_name     = 4;
    // 操作系统附加名称（比如 MIUI、EMUI、Flyme 等）
    string          os_name_x   = 5;
    // 操作系统版本
    string          os_ver      = 6;
    // 操作系统附加版本（Android 为对应厂家的版本，比如 flyme 6.0.2.4）
    string          os_ver_x    = 7;
    // 手机唯一标识
    string          id          = 8;
}

// 推送配置
message PushConf {
    // 推送服务器类型
    enum Type {
        NONE = 0;
        JPush = 1;
    }
    // 推送服务器类型（目前只支持JPush）
    Type   type  = 1;

    // 推送应用标识（JPush 的 AppKey）
    string app   = 2;
    // 推送标识，用于识别账号与手机，服务器需要该标识来推送到指定手机（JPush 的 RegistrationID）
    string token = 3;
}

// 开放授权登录的第三方账号信息
message OAuthAccountInfo {
    // 第三方平台类型，应该为 USR_NAM_TYP_3RD_ 开头的取值
    UserNameType plat         = 1;
    // 从第三方平台得到的账号 （QQ、微信的 openID；新浪微博的 uid；Facebook、Twitter 的 userID 等）
    string       third_acc_id = 2;
    // 从第三方平台得到的账号昵称
    string       nickname     = 3;
    // 头像 URL
    string       avatar_url   = 4;
}

// 用户信息
message UserInfo {
    string                    userId     = 1;
    // 用户昵称
    string                    nickname   = 2;
    // 用户手机号
    string                    phone      = 3;
    // 用户邮箱
    string                    email      = 4;
    // 用户拥有 PERMISSION_OWNER 权限的设备绑定号。（使用绑定号登录的设备绑定号）
    repeated string           bind_num   = 5;
    // 开放授权的第三方账号信息
    repeated OAuthAccountInfo OAuth_info = 6;
}


// 设备功能
message Functions {
    // 设备功能设置变更位
    enum FieldFlag {
        // 无更改
        NONE                     = 0x000000000;
        // 变更拒接陌生人
        REJECT_STRANGER_CALL_IN  = 0x000000001;
        // 变更拒呼陌生人
        REJECT_STRANGER_CALL_OUT = 0x000000002;
        // 变更定时开关机
        TIMER_POWER_ON_OFF       = 0x000000004;
        // 变更泡水提醒
        INUNDATE_REMIND          = 0x000000008;
        // 变更省电模式
        SAVE_POWER_MODE          = 0x000000010;
        // 变更通话位置
        CALL_POSITION            = 0x000000020;
        // 变更设置手表亮屏时间
        WATCH_SET_LIGHT          = 0x000000040;
        // 变更手表挂失
        WATCH_REPORT_LOST        = 0x000000080;
        // 变更定时开机
        TIMER_POWER_ON           = 0x000000100;
        // 变更定时关机
        TIMER_POWER_OFF          = 0x000000200;
        // 变更计算器开关
        ENABLE_CALCULATOR        = 0x000000400;
        // 变更短信代收功能开关。只针对设备。APP 无法设置此项，也不用处理此值。
        ENABLE_SMS_AGENT         = 0x000000800;
    }
    // 变更的设置为1没变的设置为0，参考 FieldFlag
    uint64    changed_field            = 1;

    // 拒接陌生人 开启/关闭
    bool      reject_stranger_call_in  = 2;
    // 拒呼陌生人 开启/关闭
    bool      reject_stranger_call_out = 3;
    // 定时开关机 开启/关闭
    bool      timer_power_on_off       = 4;
    // 泡水提醒 开启/关闭
    bool      inundate_remind          = 5;
    // 省电模式 开启/关闭
    bool      save_power_mode          = 6;
    // 通话位置 开启/关闭
    bool      call_position            = 7;
    // 设置手表亮屏时间 单位秒
    int32     watch_set_light          = 8;
    // 手表挂失 开启/关闭
    bool      watch_report_lost        = 9;
    // 定时开机 默认值：05:57
    TimePoint timer_power_on           = 10;
    // 定时关机 默认值：23:05
    TimePoint timer_power_off          = 11;
    // 开启计算器
    bool      enable_calculator        = 12;
    // 短信代收功能开关。只针对设备。APP 无法设置此项，也不用处理此值。
    bool      enable_sms_agent         = 13;
}

// 宝贝信息
message Baby {
    // 头像 （文件名，命名规则：H-D-deviceId-uuid.jpg (H-D-358688000000152-bfbd29c07662402eb48692888a734dce.jpg)）
    string avatar       = 1;
    // 名字 （昵称）
    string name         = 2;
    // 手机号
    string phone        = 3;

    // 性别枚举
    enum Sex {
        UNKNOWN = 0;
        MALE    = 1;
        FEMALE  = 2;
    }
    // 性别
    Sex    sex          = 4;

    // 生日 Epoch
    // 0 表示未填写
    // 如果用户正好选到 1970-01-01 00:00:00，那么该值不能为 0 ，应设置为 1
    int64  birthday     = 5;

    // 年级。
    // 该字段分两部分，第一部分(高16位)表示阶段
    //    （1 幼儿园, 2 学前班， 3 小学， 4 初中， 5 高中， 6 其他），
    // 第二部(低16位)分表示年级
    //    未知 0x00000000，用户未填写
    //    未上学 0x00010000
    //    幼儿园 0x00010001 幼儿园小班， 0x00010002 中班， 0x00010003 大班
    //    学前班 0x00020000 无年级信息
    //    小学 0x00030001 小学一年级， 0x00030002 小学二年级， 0x00030003 小学三年级， ...
    //    初中 0x00040001 初中一年级， 0x00040002 初中二年级， 0x00040003 初中三年级
    //    高中 0x00040001 高中一年级， 0x00040002 高中二年级， 0x00040003 高中三年级
    //    其他 0x00060000
    uint32 grade        = 6;

    // 身高 (单位 cm)
    int32  height       = 7;

    // 体重 (单位 Kg)
    int32  weight       = 8;
}

// 经纬度信息
message LatLon {
    // 纬度
    double latitude     = 1;
    // 经度
    double longitude    = 2;
}

// GSM 基站信息
message GsmStationInfo {
    // 国家代码
    int32   mcc     = 1;
    // 移动网号
    int32   mnc     = 2;
    // 位置区域码
    uint32  lac     = 3;
    // 基站小区编号
    uint32  cellid  = 4;
    // 信号强度
    int32   signal  = 5;
}

// CDMA 基站信息
message CdmaStationInfo {
    // 系统识别码
    int32   sid     = 1;
    // 网络识别码
    int32   nid     = 2;
    // 小区唯一识别码
    int32   bid     = 3;
    // CDMA 经纬度值，手机平台接口读出的数值
    LatLon  latlon  = 4;
    // 信号强度
    int32   signal  = 5;
}

// 蜂窝网基站信息
message CellStationInfo {
    GsmStationInfo  gsm     = 1;
    CdmaStationInfo cdma    = 2;
}

// WiFi基站信息
message WifiStationInfo {
    // Basic Service Set identifier （一般情况为 mac 地址）
    string bssid   = 1;
    // Service Set identifier （无线网络名称）
    string ssid    = 2;
    // 信号强度 dBm
    int32  signal  = 3;
    // 信道
    int32  channel = 4;
    // 信噪比 dB
    int32  signal_to_noise_ratio = 5;
}

// 位置信息
message Position {
    // 定位时间戳 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64       time        = 1;

    enum LocateType {
        // 未使用
        NONE     = 0;
        // GPS
        GPS      = 1;
        // 北斗
        BDS      = 2;
        // 伽利略
        GALILEO  = 3;
        // 格洛纳斯
        GLONASS  = 4;
        // 蜂窝定位
        CELL     = 5;
        // WiFi定位
        WIFI     = 6;
        // 混合定位
        HYBRID   = 7;
    }
    // 定位方式 (1 GPS 2 北斗 3 伽利略 4 格洛纳斯 5 蜂窝定位 6 WiFi定位 7 混合定位)
    LocateType  locate_type = 2;

    // 经纬度
    // 手表->服务器: 一般是 GPS, 为 WGS-84 坐标系
    // 服务器->APP: 国内 GCJ-02 坐标系，国外 WGS-84 坐标系
    LatLon      latLng      = 3;
    // 定位精度。单位:米
    double      accuracy    = 4;
}

// 基站信息
message StationInfo {
    // 定位时间戳 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64 time = 1;

    // 终端接入网络的方式
    enum AccessType {
        UNKNOWN_ACCESS_TYPE = 0;
        // 蜂窝移动网络
        CELL = 1;
        // Wi-Fi 网络
        WIFI = 2;
    }
    // 终端接入网络的方式
    AccessType accessType = 2;

    // 无线网络类型
    enum NetworkType {
        UNKNOWN_NETWORK_TYPE   = 0;
        GSM       = 1;
        GPRS      = 2;
        EDGE      = 3;
        HSUPA     = 4;
        HSDPA     = 5;
        WCDMA     = 6;
        CDMA      = 7;
    }
    // 无线网络类型，当 accessType 为 CELL 时有效
    NetworkType network = 3;

    // IMSI，选填
    string imsi = 4;
    // 基站定位数据，主机站放到第一个
    repeated CellStationInfo cells = 5;
    // WiFi定位数据，主机站放到第一个
    repeated WifiStationInfo wifis = 6;
}

// 设备运动状态
enum Movement {
    // 未知
    MOVEMENT_ZERO = 0;
    // 移动中
    MOVING = 1;
    // 静止
    MOTIONLESS = 2;
}

// 定位信息
message Location {
    // 设备填写的原始经纬度信息
    Position    position = 1;
    // 基站信息
    StationInfo stations  = 2;
    // 设备运动状态
    Movement    movement  = 3;
}

// 定位模式枚举
enum LocationMode {
    // 无用
    LM_USELESS = 0;
    // 被动模式
    LM_PASSIVE = 1;
    // 省电模式
    LM_POWER_SAVING = 2;
    // 普通模式
    LM_NORMAL = 3;
}


// 围栏信息
message Fence {
    // 围栏ID，uuid，调用 AddFenceReqMsg 时由 server 生成，设备的多个围栏以该值区分。
    string id     = 1;
    // 围栏名字
    string name   = 2;

    // 围栏触发条件
    enum CondFlag {
        NONE  = 0;
        LEAVE = 1;
        ENTER = 2;
    }
    // 围栏报警条件，参考 CondFlag
    uint32 cond   = 3;


    // 围栏有效时段
    message Period {
        TimePoint start_time = 1;
        TimePoint end_time = 2;
        // 重复方式 bitmap 参考 Timepoint.RepeatFlag
        uint32 repeat = 3;
    }
    // 围栏有效时段
    repeated Period period = 4;
    // 该围栏所使用的时区
    Timezone timezone = 5;

    // 围栏形状
    message Shape {
        // 圆形
        message Round {
            // 围栏圆心 国内 GCJ-02 坐标系，国外 WGS-84 坐标系
            LatLon latlon = 1;
            // 围栏半径，单位: 米
            uint32 radius = 2;
        }
        // 多边形。
        message Polygon {
            // 顶点经纬度
            repeated LatLon vertices = 1;
        }
        // 围栏形状
        oneof shape {
            Round   round   = 1;
            Polygon polygon = 2;
        }
    }
    Shape shape = 6;

    // 图标类型
    // 取值：0: 默认；1: 私人； 2: 公共
    int32 icon_type = 7;


    // 围栏事件
    message Event {
        // 围栏信息
        Fence  fence   = 1;
        // 具体触发的围栏事件（离开还是进入），参考 CondFlag
        uint32 trigger = 2;
    }
}

///////////////////////////////////////////////

// 用户与设备的关联（绑定）信息
message UsrDevAssoc {
    // 设备号
    string      deviceId    = 1;
    // 用户号
    string      userId      = 2;

    // 用户权限枚举
    enum Permission {
        // 未使用
        NONE     = 0;
        // 管理员权限 且 device 拥有者
        OWNER    = 1;
        // 管理员权限
        ADMIN    = 2;
        // 普通权限
        NORMAL   = 3;
        // 主要用于联系人里，只能跟设备通话
        MINI     = 4;
    }
    // 权限
    Permission  permission  = 3;

    // 关系 "\001" 爸爸， "\002" 妈妈， "\003" 姐姐，"\004" 爷爷， "\005" 奶奶，
    // "\006" 哥哥， "\007" 外公， "\010" 外婆， "\011" 老师
    // 其他值是自定义关系，用户未输入具体的自定义关系是，使用 "其他"
    string      relation    = 4;

    // 用户自定义头像。自定义关系时使用。
    // 命名规则：H-U-userId-uuid.jpg (H-U-bfbd29c0af62402eb48892888a734dce-bfbd29c07662402eb48692888a734dce.jpg)
    string      avatar      = 5;
}

// 设备的联系人信息
// 联系人包括三种类型：1. 绑定手表的家属/亲友；2. 普通联系人；3. 好友联系人。 这三种类型是互斥的，一个结构里只会出现一种类型。
message Contact {
    // 该字段为空意味着该联系人还没有对应的用户信息，只是普通的联系人，权限为 mini
    UsrDevAssoc usr_dev_assoc   = 1;
    // 电话号码，三种：1. 绑定手表的家属电话；2. 普通联系人填写的号码；3. 好友的手表号码（可能为空，因为好友的手表可能未填写手表号码）。
    string      number          = 2;
    // 联系人姓名，三种：1. 绑定手表的家属与手表的关系（与 UsrDevAssoc 中 relation 的值相同）；2. 普通联系人填写的姓名；3. 好友手表对应的宝贝名称。
    string      name            = 3;
    // 普通联系人类型时的 Contact ID，uuid，调用 AddContactReqMsg 时由 server 生成，设备的多个 Contact 以该值区分。 普通联系人才有有效的值，绑定关系生成的联系人该字段为空。
    string      id              = 4;
    // 好友联系人类型对应的好友手表的设备号
    string      friend_device_id = 5;
    // 设备同步了该信息
    bool dev_synced = 6;

    // 好友类型联系人对应的好友 ID
    string friend_id = 7;
    // 好友昵称，这个字段是我们给对方设置的昵称，前面的 name 字段为好友 baby name。
    string friend_nickname = 8;
    // 好友类型联系人 对应的好友的设备的 宝贝头像
    string friend_baby_avatar = 10;

    // 亲情短号
    string family_short_num = 9;
}

// 求救号码信息
message SOS {
    // SOS ID，uuid，调用 AddSosReqMsg 时由 server 生成，设备的多个SOS以该值区分。
    string id       = 1;
    // 名字
    string name     = 2;
    // 电话号码
    string phonenum = 3;
    // 设备同步了该信息
    bool dev_synced = 4;

    // 拨号顺序，从 1 开始，数值越小，优先级越高
    int32 call_order = 5;
}

// 设备在线状态
message DeviceOnline {
    //设备号
    string    deviceId  = 1;
    //设备是否在线
    bool      online    = 2;
}

// 解绑时，需要清除哪些数据
enum UnbindClearFlag {
    UBCF_NONE             = 0;
    // 清除微聊消息
    UBCF_CHAT             = 1;
    // 清除通知中心消息
    UBCF_NOTIFI_MESSAGE   = 2;
    // 清除定位历史记录
    UBCF_LOCATION_HISTORY = 4;
}

// 设备配置
message DevConf {
    DeviceSysInfo  dev_sys_info       = 1;
    Functions      funcs              = 3;
    Baby           baby               = 4;
    CompanyInfo    compInfo           = 2;
    FuncModuleInfo func_module_info   = 5;
    // 解绑时，需要清除哪些数据， bitmap，参考 UnbindClearFlag
    uint64         unbind_clear_level = 6;
}

// Configs 的 bitmask 常量
enum DevConfFlag {
    DCF_NONE               = 0;
    // for DeviceSysInfo
    DCF_DEV_SYS_INFO       = 0x0000000000000001;
    // for Functions
    DCF_FUNCTIONS          = 0x0000000000000002;
    // for Baby
    DCF_BABY               = 0x0000000000000004;
    // for Company Info
    DCF_COMPANY_INFO       = 0x0000000000000008;
    // for Func Module Info
    DCF_FUNC_MODULE_INFO   = 0x0000000000000010;
    // for unbind_clear_level
    DCF_UNBIND_CLEAR_LEVEL = 0x0000000000000020;
    // for All mask。 增加后，应修改该值
    DCF_ALL_MASK           = 0x000000000000003F;
}


// 设备资源限制
message DeviceLimit {
    // 最长亮屏时间
    int32 secondsOfLight        = 1;
    // 联系人个数
    int32 countOfContact        = 2;
    // SOS 个数
    int32 countOfSOS            = 3;
    // 闹钟个数
    int32 countOfAlarmClock     = 4;
    // 上课禁用个数
    int32 countOfClassDisable   = 5;
    // 围栏个数
    int32 countOfFence          = 6;
}

// 硬件特性
enum HwFeature {
    HWF_NONE            = 0;
    // 显示屏
    HWF_SCREEN          = 0x1;
    // 触摸屏
    HWF_TP              = 0x2;
    // 麦克风
    HWF_MIC             = 0x4;
    // 扬声器
    HWF_SPEAKER         = 0x8;
    // 基带
    HWF_BB              = 0x10;
    // 蓝牙
    HWF_BT              = 0x20;
    // WIFI
    HWF_WIFI            = 0x40;
    // 磁感器
    HWF_MAGNETIC        = 0x80;
    // 陀螺仪
    HWF_GYRO            = 0x100;
    // 加速度计
    HWF_ACCELEROMETER   = 0x200;
    // 距离感应器
    HWF_PROXIMITY       = 0x400;
    // 亮度传感器
    HWF_LIGHT           = 0x800;
    // 温度传感器
    HWF_TEMPERATURE     = 0x1000;
    // 湿度传感器
    HWF_HUMIDITY        = 0x2000;
    // 气压传感器
    HWF_PRESSURE        = 0x4000;
    // GPS
    HWF_GPS             = 0x8000;
    // 北斗
    HWF_BDS             = 0x10000;
    // 伽利略
    HWF_GALILEO         = 0x20000;
    // 格洛纳斯
    HWF_GLONASS         = 0x40000;
    // 摄像头
    HWF_CAMERA          = 0x80000;
    // 指纹
    HWF_FP              = 0x100000;
    // 红外收发器
    HWF_IR              = 0x200000;
    // 计步器
    HWF_PEDOMETER       = 0x400000;
    // 振动马达
    HWF_VIBRATION_MOTOR = 0x800000;
}

// 软件特性
enum SwFeature {
    SWF_NONE            = 0;
}

// 设备基本系统信息
message DeviceSysInfo {
    // 设备开发型号
    string      model           = 1;
    // 硬件特性，参考 HwFeature
    uint64      hw_feature      = 2;
    // 硬件版本
    string      hw_ver          = 3;
    // 固件版本
    string      fw_ver          = 4;
    // 软件版本
    string      sw_ver          = 5;
    // 软件特性
    uint64      sw_feature      = 6;
    // 设备资源限制
    DeviceLimit limit           = 7;
    // 显示型号
    string      custom_model    = 8;
}


// 设备在 APP 可用的功能模块枚举
enum FuncModule {
    FM_NONE                     = 0x00000000;
    // 围栏功能（电子围栏）
    FM_FENCE                    = 0x00000001;
    // 上学守护功能（上学守护）
    FM_CAMPUS_GUARD             = 0x00000002;
    // 微聊文本功能
    FM_MICRO_CHAT_TEXT          = 0x00000004;
    // 短信代收功能，标记设备是否支持短信转发
    FM_SMS_AGENT                = 0x00000008;
    // 定位模式
    FM_LOCATION_MODE            = 0x00000010;
    // 家庭群聊
    FM_FAMILY_GROUP_CHAT        = 0x00000020;
    // SOS 呼叫顺序调整
    FM_SOS_CALL_ORDER           = 0x00000040;
    // 地图定位轨迹功能（历史轨迹）
    FM_LOCATION_RECORD          = 0x00000080;
    // 计步（运动记步）
    FM_STEP_COUNT               = 0x00000100;
    // 通讯录
    FM_CONTACTS                 = 0x00000200;
    // SOS 功能
    FM_SOS                      = 0x00000400;
    // 上课禁用
    FM_CLASS_DISABLE            = 0x00000800;
    // 定时开关机
    FM_TIMER_POWER_ON_OFF       = 0x00001000;
    // 闹钟
    FM_ALARM_CLOCK              = 0x00002000;
    // 亮屏时间
    FM_BRIGHT_SCREEN_TIME       = 0x00004000;
    // 计算器
    FM_CALCULATOR               = 0x00008000;
    // 拒接陌生人
    FM_REJECT_STRANGER_CALL_IN  = 0x00010000;
    // 拒呼陌生人
    FM_REJECT_STRANGER_CALL_OUT = 0x00020000;
    // 单向通话
    FM_SIMPLEX_CALL             = 0x00040000;
    // 查找手表
    FM_FIND_DEVICE              = 0x00080000;
    // 拍照
    FM_TAKE_PHOTO               = 0x00100000;
    // 有奖集赞
    FM_PRAISE_COLLECTION        = 0x00200000;
    // 微聊图片功能
    FM_MICRO_CHAT_PICTURE       = 0x00400000;
}

// 功能超时时间定义
message FuncTimeoutDef {
    // 定位，单位：秒
    int32 sec_of_locate = 1;
    // 查找手表，单位：秒
    int32 sec_of_find_device = 2;
    // 拍照，单位：秒
    int32 sec_of_take_photo = 3;
    // 单向通话，单位：秒
    int32 sec_of_simplex_call = 4;
}

// 功能模块信息
message FuncModuleInfo {
    // 设备在 APP 上启用的功能模块，bitmap，参考 FuncModule
    uint64 func_module = 1;
    // 围栏最小半径，单位：米
    uint32 fence_radius_min = 2;
    // 围栏默认半径，单位：米
    uint32 fence_radius_def = 3;

    // 功能超时时间定义
    FuncTimeoutDef func_timeout_def = 4;
}


// 公司信息
message CompanyInfo {
    // 公司名
    string com_name = 1;
}


// 设备状态信息
message DeviceSensorData {
    // 设备号
    string deviceId = 1;

    // 计步
    uint32 step = 2;

    // 电量（百分比）：0-100, > 100 表示充电状态
    uint32 battery_percent = 3;
    // 电池电压，单位：mV
    // 值为 0 表示数据不可用
    uint32 battery_voltage = 4;
    // 电池格数
    // 0-7 位表示当前电量格数, 8-15 位表示总格数,
    // 第 16 位置 1 表示 UI 应该展示该电量格数，否则 UI 展示电量百分比
    // 值为 0 表示数据不可用
    uint32 battery_level = 5;
}


// 闹钟
message AlarmClock {
    // AlarmClock ID，uuid，调用 AddAlarmClockReqMsg 时由 server 生成，设备的多个 AlarmClock 以该值区分。
    string    id        = 1;
    string    name      = 2;
    // 时间点。下方的 repeat 字段为 0 时，为单次闹钟，该字段为准确的 Epoch，app 和手表以及服务器可根据该值判断闹钟是否已经触发过
    TimePoint time      = 3;
    // 重复方式 bitmap 参考 Timepoint.RepeatFlag。该字段为 0 时，为单次闹钟，上方的 timepoint 字段为 UNIX 绝对时间，app 和手表以及服务器可根据该值判断闹钟是否已经触发过
    uint32    repeat    = 4;
    // 该闹钟所使用的时区，暂未使用
    Timezone  timezone  = 5;

    // 提醒方式 bitmask 常量
    enum NoticeFlag {
        NONE    = 0;
        SOUND   = 0x01;
        VIBRATE = 0x02;
        LIGHTS  = 0x04;
        ALL     = 0x07;
    }
    // 提醒方式 bitmap 参考 NoticeFlag
    uint32  notice_flag = 6;

    bool    enable      = 7;

    // 设备同步了该信息
    bool dev_synced = 8;
}


// 上课禁用
message ClassDisable {
    // ClassDisable ID，uuid，调用 AddClassDisableReqMsg 时由 server 生成，设备的多个 ClassDisable 以该值区分。
    string    id         = 1;
    string    name       = 2;
    // 起始时间
    TimePoint start_time = 3;
    // 结束时间
    TimePoint end_time   = 4;
    // 重复方式 bitmap 参考 Timepoint.RepeatFlag
    uint32    repeat     = 5;
    // 该上课禁用所使用的时区，暂未使用
    Timezone  timezone   = 6;
    bool      enable     = 7;
    // 设备同步了该信息
    bool dev_synced      = 8;
}


// 设备事件
message Incident {
    // 设备事件类型标记
    enum IncidentFlag {
        // 无事件
        NONE               = 0;
        // 手表收到来电
        IN_CALL            = 0x0001;
        // 手表呼出电话
        OUT_CALL           = 0x0002;
        // 手表触发 SOS 事件
        SOS                = 0x0004;
        // 手表低电量
        LOW_BATTERY        = 0x0008;
        // 手表开机
        POWER_ON           = 0x0010;
        // 手表关机
        POWER_OFF          = 0x0020;
        // 手表脱腕
        OFF_WRIST          = 0x0040;
        // 手表泡水
        SOAK_WATER         = 0x0080;
        // 手表挂失
        REPORT_LOSS        = 0x0100;
        // 围栏事件
        FENCE              = 0x0200;
        // 上学守护事件
        SCHOOL_GUARD       = 0x0400;
    }
    // 事件标记，bitmap 参考 IncidentFlag
    uint64               flag     = 1;

    // 电量（百分比）：0-100
    uint32               battery  = 2;
    // 与设备通话的号码，IncidentFlag 包含 INCID_FLAG_IN_CALL 或 INCID_FLAG_OUT_CALL 时有效
    string               phoneNum = 3;
    // 围栏事件信息， IncidentFlag 包含 INCID_FLAG_FENCE 时有效 （设备端不会用到该字段）
    repeated Fence.Event fence_ev = 4;
    // 上学守护事件信息，IncidentFlag 包含 SCHOOL_GUARD 时有效 （设备端不会用到该字段）
    SchoolGuard.Event    school_guard_ev = 5;
}

// 位置记录
message PositionRecord {
    // 位置信息
    Position position = 1;
    // 事件信息
    Incident incident = 2;
    // 设备运动状态
    Movement movement = 3;

    // 终端接入网络的方式
    StationInfo.AccessType access_type = 4;
    // 设备定位时的主蜂窝基站信息
    CellStationInfo primary_cell_station_info = 5;
    // 设备定位时的主WiFi基站信息
    WifiStationInfo primary_wifi_station_info = 6;
}

// 短信消息结构（短信代收）
message SMS {
    // ID (uuid)
    // 由服务器填写，设备上传时不填
    string id = 1;
    // 设备号
    string deviceId = 2;
    // 短息发送时间
    int64 send_time = 3;
    // 短息接收时间
    int64 recv_time = 4;
    // 服务存储时间
    // 由服务器填写，设备上传时不填
    int64 server_save_time = 5;
    // 手表自己的号码
    string self_number = 6;
    // 对方号码
    string peer_number = 7;
    // 短信内容
    string content = 8;
}


// 消息通知通道定义
enum NotificationChannel {
    // 关闭所有
    NC_NONE                 = 0x00000000;
    // 手表动态
    NC_DEVICE_INCIDENT      = 0x00000001;
    // 更改设置
    NC_SETTINGS             = 0x00000002;
    // 联系人
    NC_CONTACTS             = 0x00000004;
    // 集赞
    NC_PRAISE_COLLECTION    = 0x00000008;
    // 设备通话
    NC_DEVICE_CALL          = 0x00000010;
    // 设备 SOS
    NC_DEVICE_SOS           = 0x00000020;
    // 开启所有
    NC_ALL                  = 0x0000003F;
}


// 终端地址
message TermAddr {
    // APP 用户ID 或 设备号
    string addr = 1;
    enum Type {
        UNKNOWN = 0;
        // APP 用户
        USER = 1;
        // 手表
        DEVICE = 2;
    }
    // 终端类型
    Type type = 2;
}


// 微聊消息结构
message ChatMessage {
    message Voice {
        // 语音文件名
        // 文件名命名规则：源地址-目的地址-文件生成时间.扩展名
        // from-to-timestamp.amr
        // ce03ee7b55664b76b85d2750a4e26d18-358688000000152-1512104471.amr
        string file_name = 1;
        // 文件大小，字节
        uint64 file_size = 2;
        // 语音时长 单位：秒
        int32  duration = 3;
    }

    oneof message {
        // 表情消息
        string emoticon = 1;
        // 文本消息
        string text = 2;
        // 语音消息
        Voice voice = 3;
        // 图片消息（图片文件名）
        // 文件名命名规则：源地址-目的地址-文件生成时间.扩展名
        // from-to-timestamp.jpg
        // ce03ee7b55664b76b85d2750a4e26d18-358688000000152-1512104471.jpg
        string picture = 4;
    }
}


// 群组
message ChatGroup {
    // 群组 ID (UUID)
    string id = 1;
    // 群组名称
    string name = 2;

    message Member {
        // 设备成员
        message Device {
            // 设备号
            string deviceId = 1;
            // 宝贝名称
            string name = 2;
            // 头像
            string avatar = 3;
        }
        // 用户成员
        message User {
            // 用户与设备的关联（绑定）信息
            UsrDevAssoc usr_dev_assoc = 1;
        }
        // 成员信息系
        oneof Info {
            Device device = 1;
            User user = 2;
        }
    }

    // 成员列表
    repeated Member member = 3;
}

/********************************* 通用结构 End *********************************/


/********************************* 数据包 TAG begin *********************************/

// 接口指令码
enum Tag {
    // 心跳
    HEARTRATE                       = 0x0000;

    // 查询APP版本
    CHECK_APP_VER                   = 0x0100;

    // 手机端登录
    LOGIN                           = 0x0200;
    // 手机端注册
    REGISTER                        = 0x0201;
    // 修改密码
    CHANGE_PASSWD                   = 0x0202;
    // 查询用户号是否已注册
    CHECK_USER_EXISTS               = 0x0203;
    // 强制退出（挤出登录）
    ON_EXTRUDED_LOGIN               = 0x0204;
    // 设置密码（忘记密码时）
    SET_PASSWD                      = 0x0205;
    // 设备登录
    DEV_LOGIN                       = 0x0206;
    // 抓取用户信息
    FETCH_USER_INFO                 = 0x0207;
    // 关联第三方账号
    ASSOCIATE_THIRD_ACCOUNT         = 0x0208;
    // 解除第三方账号
    DISASSOCIATE_THIRD_ACCOUNT      = 0x0209;
    // 更新APP推送配置（极光推送还是友盟、APP key、token等信息）
    SET_APP_PUSH_CONF               = 0x020B;
    // 根据手机号获取关联的第三方平台账号
    QUERY_THIRD_ACCOUNT_BY_PHONE    = 0x020C;
    // 获取 APP 通知配置
    GET_NOTIFICATION_CHANNEL        = 0x0220;
    // 设置 APP 通知配置
    SET_NOTIFICATION_CHANNEL        = 0x0221;

    // 查询设备是否激活
    CHECK_DEVICE_ACTIVATION         = 0x0300;
    // 获取设备的用户列表
    FETCH_USERS_OF_DEVICE           = 0x0301;
    // 获取用户的设备列表
    FETCH_DEVICES_OF_USER           = 0x0302;
    // 绑定设备
    BIND_DEVICE                     = 0x0303;
    // 通知管理员有用户绑定设备
    ON_BIND_DEVICE_REQUEST          = 0x0304;
    // 通知用户绑定成功
    ON_DEVICE_BIND                  = 0x0305;
    // 解绑设备
    UNBIND_DEVICE                   = 0x0306;
    // 设备自行解绑
    DEVICE_UNBIND_SELF              = 0x0307;
    // 通知用户设备被解绑
    ON_DEVICE_UNBIND                = 0x0308;
    // 获取用户信息，以及用户与设备的关联信息
    FETCH_USR_DEV_PARTIC            = 0x0309;

    // 上传设备配置
    PUSH_DEV_CONF                   = 0x0400;
    // 获取设备配置
    FETCH_DEV_CONF                  = 0x0401;
    // 通知设备的配置信息有更新
    ON_DEV_CONF_CHANGED             = 0x0402;
    // 通知 APP 设备已经同步了 DevConf
    ON_DEV_CONF_SYNCED              = 0x0403;

    // 添加围栏
    ADD_FENCE                       = 0x0410;
    // 删除围栏
    DEL_FENCE                       = 0x0411;
    // 修改围栏
    MODIFY_FENCE                    = 0x0412;
    // 获取围栏列表
    GET_FENCE                       = 0x0413;
    // 通知设备的围栏信息有变动
    ON_DEV_FENCE_CHANGED            = 0x0414;

    // 添加 SOS
    ADD_SOS                         = 0x0420;
    // 删除 SOS
    DEL_SOS                         = 0x0421;
    // 修改 SOS
    MODIFY_SOS                      = 0x0422;
    // 获取 SOS 列表
    GET_SOS                         = 0x0423;
    // 通知 SOS 信息变动
    ON_DEV_SOS_CHANGED              = 0x0424;
    // 通知 APP 设备端同步了 SOS 信息
    ON_DEV_SOS_SYNCED               = 0x0425;
    // 调整 SOS 号码拨号顺序
    CHANGE_SOS_CALL_ORDER           = 0x0426;
    // SOS 号码顺序已被修改
    ON_SOS_CALL_ORDER_CHANGED       = 0x0427;

    // 添加联系人
    ADD_CONTACT                     = 0x0430;
    // 删除联系人
    DEL_CONTACT                     = 0x0431;
    // 修改联系人
    MODIFY_CONTACT                  = 0x0432;
    // 获取联系人列表
    GET_CONTACT                     = 0x0433;
    // 通知联系人信息变动
    ON_DEV_CONTACT_CHANGED          = 0x0434;
    // 通知 APP 设备端同步了联系人信息
    ON_DEV_CONTACT_SYNCED           = 0x0435;

    // 添加闹钟
    ADD_ALARM_CLOCK                 = 0x0440;
    // 删除闹钟
    DEL_ALARM_CLOCK                 = 0x0441;
    // 修改闹钟
    MODIFY_ALARM_CLOCK              = 0x0442;
    // 获取闹钟列表
    GET_ALARM_CLOCK                 = 0x0443;
    // 通知闹钟信息变动
    ON_DEV_ALARM_CLOCK_CHANGED      = 0x0444;
    // 通知 APP 设备端同步了闹钟信息
    ON_DEV_ALARM_CLOCK_SYNCED       = 0x0445;

    // 添加上课禁用
    ADD_CLASS_DISABLE               = 0x0450;
    // 删除上课禁用
    DEL_CLASS_DISABLE               = 0x0451;
    // 修改上课禁用
    MODIFY_CLASS_DISABLE            = 0x0452;
    // 获取上课禁用列表
    GET_CLASS_DISABLE               = 0x0453;
    // 通知上课禁用信息变动
    ON_DEV_CLASS_DISABLE_CHANGED    = 0x0454;
    // 通知 APP 设备端同步了上课禁用信息
    ON_DEV_CLASS_DISABLE_SYNCED     = 0x0455;

    // 获取上学守护
    GET_SCHOOL_GUARD                = 0x0460;
    // 添加上学守护
    ADD_SCHOOL_GUARD                = 0x0461;
    // 删除上学守护
    DEL_SCHOOL_GUARD                = 0x0462;
    // 修改上学守护
    MODIFY_SCHOOL_GUARD             = 0x0463;
    // 通知上学守护信息有变动
    ON_SCHOOL_GUARD_CHANGED         = 0x0464;

    // 添加集赞
    ADD_PRAISE                      = 0x0470;
    // 删除集赞
    DEL_PRAISE                      = 0x0471;
    // 修改集赞
    MODIFY_PRAISE                   = 0x0472;
    // 获取集赞
    GET_PRAISE                      = 0x0473;
    // 通知集赞信息有变动
    ON_PRAISE_CHANGED               = 0x0474;
    // 点赞
    DO_PRAISE                       = 0x0475;
    // 取消集赞任务
    CANCEL_PRAISE                   = 0x0476;
    // 设备发送：奖品已收到
    PRIZE_OF_PRAISE_GOT             = 0x0477;

    // 设备端上传当前定位
    LOCATION                        = 0x0501;
    // 手机端获取当前定位S1
    LOCATE_S1                       = 0x0502;
    // 手机端获取当前定位S2
    LOCATE_S2                       = 0x0503;
    // 服务器推送实时定位S3
    LOCATE_S3                       = 0x0504;
    // 查询有定位数据的日期
    QUERY_DAYS_LOCATION             = 0x0505;
    // 获取某个时间段的历史轨迹
    QUERY_LOCATIONS_IN_TIME_SEGMENT = 0x0506;
    // 查询设备是否在线
    CHECK_DEVICE_ONLINE             = 0x0507;
    // 设备上线/下线通知
    ON_DEVICE_ONLINE_STATUS         = 0x0508;
    // 通知 APP 手表新的定位信息
    ON_DEVICE_POSITION              = 0x050A;
    // 查询手表最新定位信息
    FETCH_DEVICE_LOCATION           = 0x050B;
    // 查询手表定位模式
    GET_LOCATION_MODE               = 0x0510;
    // 修改设备定位模式
    MODIFY_LOCATION_MODE            = 0x0511;
    // 定位模式有变动
    ON_LOCATION_MODE_CHANGED        = 0x0512;


    // 设备端上传特定事件
    DEVICE_INCIDENT                 = 0x0600;
    // 服务器通知 APP 手表有特定事件发生
    ON_DEVICE_INCIDENT              = 0x0601;

    // 代收短息：手表收到短信后，报告给服务器
    SMS_AGENT_REPORT_SMS            = 0x0610;
    // 代收短息：APP 接收短信开关
    SMS_AGENT_SWITCH                = 0x0618;
    // 代收短息：APP 获取开关状态
    SMS_AGENT_GET_SWITCH_STATUS     = 0x0619;
    // 代收短息：APP 查询历史短信
    SMS_AGENT_GET                   = 0x061A;
    // 代收短信：有新短信到达
    SMS_AGENT_ON_NEW_SMS            = 0x061B;

    // 时间同步
    SYNC_TIME                       = 0x0700;
    // 获取天气信息
    GET_WEATHER                     = 0x0710;

    // 手表发起交友请求
    MAKE_FRIENDS                    = 0x0780;
    // 删除好友
    DEL_FRIEND                      = 0x0781;
    // 获取好友
    GET_FRIEND                      = 0x0782;
    // 通知好友信息有变动
    ON_FRIEND_CHANGED               = 0x0783;
    // 修改好友昵称
    MODIFY_FRIEND_NICKNAME          = 0x0784;
    // 修改好友短号/亲情号
    MODIFY_FRIEND_FAMILY_SHORT_NUM  = 0x0785;

    // 设备端激活
    ACTIVATE_DEVICE                 = 0x0800;
    // 获取设备二维码
    GET_QRC                         = 0x0801;
    // 设备上传电话号码
    DEV_REPORT_TEL_NUM              = 0x0802;

    // 查找手表S1
    FIND_DEVICE_S1                  = 0x0900;
    // 查找手表S2
    FIND_DEVICE_S2                  = 0x0901;
    // 查找手表S3
    FIND_DEVICE_S3                  = 0x0902;

    // 挂失设备
    REPORT_DEVICE_LOSS              = 0x0903;

    // 查询手表传感器数据S1
    FETCH_DEVICE_SENSOR_DATA_S1     = 0x0906;
    // 查询手表传感器数据S2
    FETCH_DEVICE_SENSOR_DATA_S2     = 0x0907;
    // 查询手表传感器数据S3
    FETCH_DEVICE_SENSOR_DATA_S3     = 0x0908;
    // 设备报告传感器数据
    DEVICE_REPORT_SENSOR_DATA       = 0x0909;
    // 设备传感器数据通知到 APP
    ON_DEVICE_SENSOR_DATA           = 0x090A;
    // 查询最新的设备传感器数据
    GET_LAST_DEVICE_SENSOR_DATA     = 0x090B;

    // 修改用户信息（权限、关系）
    MODIFY_USER_DEV_ASSOC           = 0x090C;
    // 通知相关终端用户关联信息（权限、关系）被修改
    ON_USR_DEV_ASSOC_MODIFIED       = 0x090D;

    // 手表拍照S1
    TAKE_PHOTO_S1                   = 0x0A01;
    // 手表拍照S2
    TAKE_PHOTO_S2                   = 0x0A02;
    // 手表拍照S3
    TAKE_PHOTO_S3                   = 0x0A03;
    // 单向通话S1
    SIMPLEX_CALL_S1                 = 0x0A04;
    // 单向通话S2
    SIMPLEX_CALL_S2                 = 0x0A05;
    // 单向通话S3
    SIMPLEX_CALL_S3                 = 0x0A06;

    // 接收微聊表情消息 新版本已废弃，注意兼容旧版本
    ON_NEW_MICRO_CHAT_EMOTICON      = 0X0E01;
    // 接收微聊语音消息 新版本已废弃，注意兼容旧版本
    ON_NEW_MICRO_CHAT_VOICE         = 0X0E03;
    // 接收微聊文本消息 已废弃
    ON_NEW_MICRO_CHAT_TEXT          = 0x0E05;
    // 发送微聊消息
    SEND_CHAT_MESSAGE               = 0x0E06;
    // 接收微聊消息
    ON_NEW_CHAT_MESSAGE             = 0x0E07;

    // 发送群组微聊消息
    SEND_GROUP_CHAT_MESSAGE         = 0x0E10;
    // 接收群组微聊消息
    ON_NEW_GROUP_CHAT_MESSAGE       = 0X0E11;
    // 获取家庭群聊群组
    GET_FAMILY_GROUP_OF_CHAT        = 0x0E12;
    // 群组成员变动
    ON_CHAT_GROUP_MEMBER_CHANGED    = 0x0E13;

    // 上传文件前协商请求
    FILE_UPLOAD_BEFORE              = 0x0F04;
    // 上传文件数据
    FILE_UPLOAD                     = 0x0F05;
    // 下载文件前协商请求
    FILE_DOWNLOAD_BEFORE            = 0x0F06;
    // 下载文件数据
    FILE_DOWNLOAD                   = 0x0F07;
    // 文件传输完成通知
    FILE_TRANS_FINISH               = 0x0F08;
}

/********************************* 数据包 TAG End *********************************/


/********************************** 心跳 begin *********************************/

// 心跳
message Heartbeat {
    // 心跳间隔时间定义
    enum ExpireTime {
        // 未设置
        NONE = 0;
        // 最小值
        MIN = 60;
        // 最大值
        MAX = 1800;
        // 偏差范围
        ADJUST = 10;
    }
}

// Tag: HEARTRATE 0x0000 手机端和设备端上传心跳包
message HeartReqMsg {
}

message HeartRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/*********************************** 心跳 end **********************************/

// Tag: CHECK_APP_VER 0x0100 查询APP版本
message CheckAppVerReqMsg {
    // 手机操作系统，0：ios   1：android
    int32 os = 1;
}

message CheckAppVerRspMsg {
    // SUCCESS, FAILURE, NOT_EXISTS
    ErrorCode err_code = 1;
    // 版本号
    string ver = 2;
}

/******************************** 用户登录注册 begin ********************************/

// 用户名类型
enum UserNameType {
    USR_NAM_TYP_UNKNOWN = 0;
    // +国家代码手机号
    USR_NAM_TYP_PHONE   = 1;
    // 邮箱地址
    USR_NAM_TYP_EMAIL   = 2;
    // 设备绑定号
    USR_NAM_TYP_DEVICE  = 3;

    // 以下为第三方平台账号开放授权(OAuth2.0)的用户名类型
    // QQ 登录
    USR_NAM_TYP_3RD_QQ      = 256;
    // 微信登录
    USR_NAM_TYP_3RD_WECHAT  = 257;
    // 新浪微博登录
    USR_NAM_TYP_3RD_WEIBO   = 258;
    // Facebook 登录
    USR_NAM_TYP_3RD_FACEBOOK = 259;
    // Twitter 登录
    USR_NAM_TYP_3RD_TWITTER = 260;
    // Googleplus 登录
    USR_NAM_TYP_3RD_GOOGLEPLUS = 261;
}

// 第三方平台登录流程:
// 1. 用户点击第三方登录微信图标获得微信授权信息（openID 等）
// 2. 构建登录请求消息 LoginReqMsg { type: USR_NAM_TYP_3RD_WECHAT, name: wechat_openID, ... } 向服务器发送。
// 3.1 登录成功时，服务器会返回成功后的 LoginRspMsg
// 3.2 若该微信号对应的用户不存在，服务器返回 NOT_EXISTS，引导用户输入手机号码，
//     然后通过 QueryThirdAccountByPhoneReqMsg(QUERY_THIRD_ACCOUNT_BY_PHONE) 验证手机号是否已注册，以及是否经绑定了其他微信号，
//     若未绑定其他微信号，则发送验证码（短信验证码）验证手机号确实是操作人拥有的手机号。
//     验证手机号有效后，若手机号未注册，需要继续引导用户设置密码。
// 4. 根据第 3.2 步的信息，构建注册消息
//        RegisterReqMsg {
//            type: USR_NAM_TYP_PHONE,
//            login_sign: 手机号,
//            passwd: 根据3.2步的情况填或不填,
//            OAuth_Info {
//                plat: USR_NAM_TYP_3RD_WECHAT,
//                third_acc_id: openID,
//                nickname: 昵称,
//                avatar_url: 头像,
//            },
//        }
//    发起注册请求
// 5. 根据注册接口的返回内容提示用户
// 5.1 ALREADY_EXISTS 表示所使用的手机号或微信已经注册过了，已经有对应的账号了
// 5.2 ALREADY_ASSOC_OTHER 微信注册时，附带的手机号有对应的账号，并且此账号也已经关联了微信，并且关联的微信用户是其他的微信用户。
//                         注：若关联的微信用户就是此次请求的微信用户，服务器返回的错误码是 ALREADY_EXISTS。
//
// Tag: LOGIN 0x0200 手机端登录
message LoginReqMsg {
    // 用户名类型
    UserNameType    type        = 1;
    // 用户名。可能的取值有：1. +国家代码手机号；2. 邮箱地址；3. 设备绑定号；4. 第三方账号开放授权(OAuth2.0)的ID
    string          name        = 2;
    // 密码: 6~15位的 数字、大小写英文字符、下划线'_'。 第三方平台账号开放授权时，该字段为空。
    string          passwd      = 3;
    // 心跳间隔，单位：秒。取值范围参考 Heartbeat.ExpireTime
    int32           expire      = 4;
    // 推送配置（可选）
    // 登录时未填写的话，后续应该使用 SET_APP_PUSH_CONF SetAppPushConf 设置
    // 推送配置
    PushConf        push_conf   = 5;
    // 手机信息
    PhoneInfo       phone_info  = 6;

    // APP 版本信息
    message VersionInfo {
        int32 ver_code = 1;
        string ver_name = 2;
        string ver_name_internal = 3;
    }
    // APP 版本信息
    VersionInfo     ver_info    = 7;

    // 上次登录时服务器返回的 session_id。填空时，服务器会挤出其他手机上登录的该账号，回响消息中的 session_id 会重更新。
    string session_id = 8;
}

message LoginRspMsg {
    // SUCCESS, INVALID_PARAM, FAILURE, NOT_IMPLEMENTED, USER_OR_PASSWD_WRONG, NO_USER，INVALID_SESSION, NOT_COMPAT.
    // INVALID_SESSION 在自动登录时可能会收到，表示可能有其他手机登录了该账号。
    // NOT_COMPAT 已不再兼容此版本的应用，需要升级
    // NOT_EXISTS 用户不存在。使用第三方登录时，引导用户填写手机号码，然后使用注册接口
    ErrorCode   err_code    = 1;
    // 用户ID
    string      userId      = 2;
    // 心跳间隔，单位：秒。终端应该使用此值。
    int32       expire      = 3;
    // 这次登录时，服务器给出的 session ID
    string      session_id  = 4;
}


// Tag: REGISTER 0x0201 手机端注册
message RegisterReqMsg {
    // 用户名类型。可能的取值：PHONE EMAIL DEVICE
    // 只能取此 3 种情况，这3种情况需要配合密码登录
    UserNameType type = 1;
    // 登录记号。可能的取值有：1. +国家代码手机号；2. 邮箱地址；3. 设备绑定号
    // 只能取此 3 种值，这3种情况需要配合密码登录
    string login_sign = 2;
    // 密码: 6~15位的 数字、大小写英文字符、下划线'_'。
    // 携带完整的 OAuth_Info 时，该字段可不填，使用 login_sign 所对应的账号的密码，login_sign 所对应的账号存在时也不应该填写该字段。
    string passwd = 3;

    // 第三方平台账号授权信息
    OAuthAccountInfo OAuth_info = 4;
}

message RegisterRspMsg {
    // SUCCESS 成功
    // INVALID_PARAM 无效参数
    // FAILURE 失败
    // ALREADY_EXISTS 用户已存在
    // ALREADY_ASSOC_OTHER 在附带有第三方平台账号时可能会出现该错误码，表示账号已经关联了对应平台的其他第三方用户
    ErrorCode err_code = 1;
}


// Tag: CHANGE_PASSWD 0x0202 修改密码
message ChangePwdReqMsg {
    string userId   = 1;
    // 新密文（6~15位）
    string new_pwd   = 2;
    // 旧密文（6~15位）
    string old_pwd   = 3;
}

message ChangePwdRspMsg {
    // INVALID_PARAM, FAILURE, NO_USER, OLD_PASSWD_WRONG, SUCCESS
    ErrorCode err_code = 1;
}


// Tag: CHECK_USER_EXISTS 0x0203 查询用户号是否已注册。
message CheckUserReqMsg {
    // 用户名类型。可能的取值：PHONE EMAIL DEVICE
    UserNameType    type    = 1;
    // 用户名。可能的取值有：1. +国家代码手机号；2. 邮箱地址；3. 设备绑定号
    string          name    = 2;
}

message CheckUserRspMsg {
    // NOT_EXISTS, ALREADY_EXISTS, FAILURE
    ErrorCode   err_code    = 1;
    // 用户ID
    string      userId      = 2;
}


// Tag: ON_EXTRUDED_LOGIN 0x0204 强制退出
// 被挤出
message ForceExitReqMsg {
}

message ForceExitRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: SET_PASSWD 0x0205 忘记密码中的设置密码
message SetPwdReqMsg {
    // 用户名类型。可能的取值：PHONE EMAIL DEVICE
    UserNameType    type    = 1;
    // 用户名。可能的取值有：1. +国家代码手机号；2. 邮箱地址；3. 设备绑定号
    string          name    = 2;
    // 密码: 6~15位的 数字、大小写英文字符、下划线'_'。
    string          new_pwd = 3;
}

message SetPwdRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER
    ErrorCode err_code = 1;
}


// Tag: DEV_LOGIN 0x0206 设备登录
message DeviceLoginReqMsg {
    // 设备ID
    string deviceId = 1;
    // 密码
    string passwd   = 2;
    // 心跳间隔，单位：秒。取值范围参考 Heartbeat.ExpireTime
    int32  expire   = 3;
    // 语言。lang-country code (参考 ISO 639 标准)
    string language = 4;
}

message DeviceLoginRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, USER_OR_PASSWD_WRONG, INACTIVATED
    ErrorCode err_code = 1;
    // 心跳间隔，单位：秒。终端应该使用此值。
    int32     expire   = 2;

    // 下次登录应使用的服务器地址。 格式: [scheme://]host[:port]。为空时，表示延用之前的值。
    // scheme: 协议名，用于指明网络连接类型，取值: tcp, tls。可为空，默认 tcp。
    // host: 主机，用于指明服务器 domain。示例：kid.cqkct.com, 192.168.1.10, [::10]。
    // port: 端口，可为空，默认值依赖 scheme: tcp -> 6618, tls -> 6619。
    // 示例：tcp://kid.cqkct.com:6618, tls://kid.cqkct.com:6619, kid.cqkct.com:6618, kid.cqkct.com,
    // tcp://192.168.1.10:6618, tls://192.168.1.10:6619, 192.168.1.10:6618, 192.168.1.10
    // tcp://[::10]:6618, tls://[::10]:6619, [::10]:6618, [::10]
    string    srv_addr_next_time_to_use = 3;
    // 新的 UDP 文件传输地址。格式: [scheme://]host[:port]。为空时，表示延用之前的值。
    // scheme: 协议名，用于指明网络连接类型，取值: udp, dtls。可为空，默认 udp。
    // host: 主机，用于指明服务器 domain。示例：kid.cqkct.com, 192.168.1.10, [::10]。
    // port: 端口，可为空，默认值依赖 scheme: udp -> 6638, dtls -> 6639。
    // 示例：udp://kid.cqkct.com:6638, dtls://kid.cqkct.com:6639, kid.cqkct.com:6638, kid.cqkct.com,
    // udp://192.168.1.10:6638, dtls://192.168.1.10:6639, 192.168.1.10:6638, 192.168.1.10
    // udp://[::10]:6638, dtls://[::10]:6639, [::10]:6638, [::10]
    string    udp_file_addr = 4;
    // 新的生成设备二位码的 URL。为空时，表示延用之前的值。
    string    base_qr_url = 5;

    // 定位模式
    LocationMode location_mode = 6;
    // 定位频率（间隔），单位：秒
    int32 location_freq = 7;
}


// TAG: FETCH_USER_INFO 0x0207 抓取用户信息
message FetchUserInfoReqMsg {
    // 用户 ID
    string userId = 1;
}

message FetchUserInfoRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER
    ErrorCode   err_code = 1;
    // 用户信息
    UserInfo    user_info = 2;
}


// Tag: ASSOCIATE_THIRD_ACCOUNT 0x0208 关联第三方账号
message AssociateThirdAccountReqMsg {
    // 用户 ID
    string userId = 1;
    // 第三方平台账号授权信息
    OAuthAccountInfo OAuth_info = 2;
}

message AssociateThirdAccountRspMsg {
    // SUCCESS, FAILURE,
    // NO_USER 未找到对应的 user
    // ALREADY_ASSOC_OTHER 用户已经关联了第三方平台的其他账号
    // ALREADY_ASSOC_OTHER_USER 第三方平台的账号已经关联了其他用户
    ErrorCode err_code = 1;
}


// Tag: DISASSOCIATE_THIRD_ACCOUNT 0x0209 解除第三方账号
message DisassociateThirdAccountReqMsg {
    // 用户 ID
    string userId = 1;
    // 具体的第三方平台
    UserNameType plat = 2;
    // 从第三方平台得到的账号 （QQ、微信的 openID；新浪微博的 uid；Facebook、Twitter 的 userID 等）
    string third_acc_id = 3;
}

message DisassociateThirdAccountRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER
    ErrorCode err_code = 1;
}


// Tag: SET_APP_PUSH_CONF 0x020B 更新APP推送配置（极光推送还是友盟、APP key、token等信息）
// 只允许 APP 用户自己设置自己的推送信息
message SetAppPushConfReqMsg {
    // 用户 ID
    string userId = 1;
    // 推送配置
    PushConf push_conf = 2;
}

message SetAppPushConfRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER, NOT_ALLOWED
    ErrorCode err_code = 1;
}


// Tag: QUERY_THIRD_ACCOUNT_BY_PHONE 0x020C 根据手机号获取关联的第三方平台账号
message QueryThirdAccountByPhoneReqMsg {
    // 手机号
    string phone = 1;
    // 具体的第三方平台
    // 未指定时，将返回所有关联的第三方账号信息
    UserNameType plat = 2;
}

message QueryThirdAccountByPhoneRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER(手机号未注册)
    ErrorCode err_code = 1;
    // 开放授权的第三方账号信息
    repeated OAuthAccountInfo OAuth_info = 2;
}


// Tag: GET_NOTIFICATION_CHANNEL 0x0220 获取 APP 通知通道配置
message GetNotificationChannelReqMsg {
    // 用户 ID
    string userId = 1;
    // 设备号
    string deviceId = 2;
}

message GetNotificationChannelRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
    // 通道。bitmap 参考 NotificationChannel。
    int32 chan = 2;
}


// Tag: SET_NOTIFICATION_CHANNEL 0x0221 设置 APP 通知通道配置
message SetNotificationChannelReqMsg {
    // 用户 ID
    string userId = 1;
    // 设备号
    string deviceId = 2;
    // 通道。bitmap 参考 NotificationChannel。
    int32 chan = 3;
}

message SetNotificationChannelRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_USER, NO_USER, INACTIVATED
    ErrorCode err_code = 1;
}

/******************************** 登录注册 end **********************************/


/********************************** 绑定 与 解绑 begin *********************************/

// Tag: CHECK_DEVICE_ACTIVATION 0x0300 查询设备是否激活
message CheckDeviceReqMsg {
    // 设备号
    string deviceId = 1;
}

message CheckDeviceRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: FETCH_USERS_OF_DEVICE 0x0301 获取设备的用户列表
message FetchUserListReqMsg {
    // 设备ID
    string deviceId = 1;
}

message FetchUserListRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
    // 设备的用户列表
    repeated UsrDevAssoc usr_dev_assoc = 2;
}


// Tag: FETCH_DEVICES_OF_USER 0x0302 获取用户的设备列表
message FetchDeviceListReqMsg {
    // 用户ID
    string userId = 1;
}

message FetchDeviceListRspMsg {
    // INVALID_PARAM, SUCCESS, NO_USER, FAILURE
    ErrorCode err_code = 1;
    // 用户的设备列表
    repeated UsrDevAssoc usr_dev_assoc = 2;
}


// 绑定流程：Tag:0x0303, Tag:0x0304, Tag:0x0305; 流水号相同
//
// Tag: BIND_DEVICE 0x0303 绑定设备
message BindDevReqMsg {
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc   = 1;
    // 申请时输入的称呼
    string      appellation     = 2;
}

message BindDevRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, NO_USER, INACTIVATED
    // SUCCESS(绑定成功),
    // ALREADY_EXISTS(曾经绑定，应该当作绑定成功),
    // IN_PROGRESS(已经通知管理员，等待管理员同意),
    ErrorCode   err_code        = 1;
    // 绑定成功（SUCCESS，ALREADY_EXISTS）后的绑定关系
    UsrDevAssoc usr_dev_assoc   = 2;
}


// Tag: ON_BIND_DEVICE_REQUEST 0x0304 通知管理员有用户绑定设备
message NotifyAdminBindDevReqMsg {
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc   = 1;
    // 申请时输入的称呼
    string      appellation     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64       time            = 3;
}

message NotifyAdminBindDevRspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code        = 1;
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc   = 2;
}


// Tag: ON_DEVICE_BIND 0x0305 绑定成功，通知相关用户
// 管理员同意后，发送给绑定请求者
// 用户收到此通知后，主动更新相应数据；后台不另行通知
message NotifyUserBindDevReqMsg {
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc   = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64       time            = 2;
    // 绑定关系建立者（userId）
    string      binder          = 3;
}

message NotifyUserBindDevRspMsg {
    // SUCCESS,  FAILURE
    ErrorCode err_code = 1;
}


// 解绑流程：Tag:0x0306, Tag:0x0308; 流水号相同
//
// Tag: UNBIND_DEVICE 0x0306 解绑设备
message UnbindDevReqMsg {
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc = 1;
}

message UnbindDevRspMsg {
    // SUCCESS, NO_DEVICE, INACTIVATED, NO_USER, NOT_EXISTS(本未绑定), FAILURE
    ErrorCode err_code = 1;
    // 需要清除哪些数据， bitmap，参考 UnbindClearFlag
    uint64 clear_level = 2;
}


// 设备自行解绑：Tag:0x0307, Tag:0x0308; 流水号相同
//
// Tag: DEVICE_UNBIND_SELF 0x0307 设备自行解绑
message UnbindDevSelfReqMsg {
    // 设备号
    string deviceId = 1;
}

message UnbindDevSelfRspMsg {
    // INVALID_PARAM, FAILURE, SUCCESS, NO_DEVICE, INACTIVATED, NOT_ALLOWED(只允许自己解绑自己)
    ErrorCode err_code = 1;
}


// Tag: ON_DEVICE_UNBIND 0x0308 如果解绑成功，通知被解绑用户
// 拥有者解绑后，通知所有用户
// 用户收到此通知后，主动更新相应数据；后台不另行通知
message NotifyUserUnbindDevReqMsg {
    // 用户与设备的关联信息
    UsrDevAssoc usr_dev_assoc   = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64       time            = 2;
    // 解绑者 （userId 或 deviceId；为空表示管理台解绑）
    string      unbinder        = 3;
    // 需要清除哪些数据， bitmap，参考 UnbindClearFlag
    uint64      clear_level     = 4;
}

message NotifyUserUnbindDevRspMsg {
    // SUCCESS,  FAILURE
    ErrorCode err_code = 1;
}


// Tag: FETCH_USR_DEV_PARTIC 0x0309  获取用户信息，以及用户与设备的关联信息
// 该命令是一个 trick，主要用在 APP 收到通知后，获取需要的相关信息
message FetchUsrDevParticReqMsg {
    string userId   = 1;
    string deviceId = 2;
}

message FetchUsrDevParticRspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code        = 1;
    // 用户信息，可能为空
    UserInfo    user_info       = 2;
    // 用户与设备的关联关系，可能为空
    UsrDevAssoc usr_dev_assoc   = 3;
    // 设备的 Baby 信息，可能为空
    Baby        baby            = 4;
}

/******************************** 绑定 End ********************************/


/******************************** 设备配置信息 begin ******************************/

// Tag: PUSH_DEV_CONF 0x0400 上传设备配置
// 设备 push DevConf 的 DeviceSysInfo 时，只需填写 hw_ver、fw_ver、sw_ver 三个字段
message PushDevConfReqMsg {
    //设备号
    string  deviceId    = 1;
    // bitmap: 参考 DevConfFlag
    uint64  flag        = 2;
    DevConf conf        = 3;
}

message PushDevConfRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: FETCH_DEV_CONF 0x0401 获取设备配置
message FetchDevConfReqMsg {
    // 设备号
    string  deviceId   = 1;
    // bitmap: 参考 DevConfFlag
    uint64  flag       = 2;
}

message FetchDevConfRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode   err_code    = 1;
    // bitmap: 参考 DevConfFlag
    uint64      flag        = 2;
    // 具体内容
    DevConf     conf        = 3;
}


// Tag: ON_DEV_CONF_CHANGED 0x0402 通知相关终端：设备配置信息有更新
message NotifyDevConfChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // bitmap: 参考 DevConfFlag
    uint64  flag        = 2;
    // 具体内容。
    DevConf conf        = 3;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 4;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 5;
}

message NotifyDevConfChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_DEV_CONF_SYNCED 0x0403 通知 APP 设备已经同步了 DevConf
message NotifyDevConfSyncedReqMsg {
    // 设备ID
    string  deviceId    = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64   time        = 2;
    // 手表同步的具体内容。
    DevConf conf        = 3;
}

message NotifyDevConfSyncedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/******************************** 设备配置信息 end ******************************/

/******************************** 围栏配置 begin *******************************/

// Tag: ADD_FENCE 0x0410 添加 Fence
message AddFenceReqMsg {
    string deviceId = 1;
    // Fence 的 id 不用填写，服务器会忽略 id，添加成功后正确的 id 在回响中携带
    repeated Fence fence = 2;
}

message AddFenceRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, OUT_OF_LIMIT
    ErrorCode err_code = 1;
    // 添加成功后的 Fence 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 Fence id）
    repeated Fence fence = 2;
}


// Tag: DEL_FENCE 0x0411 删除 Fence
message DelFenceReqMsg {
    string deviceId = 1;
    // Fence 的 id
    repeated string fence_id = 2;
}

message DelFenceRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, NOT_EXISTS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: MODIFY_FENCE 0x0412 修改 Fence
message ModifyFenceReqMsg {
    string deviceId = 1;
    repeated Fence fence = 2;
}

message ModifyFenceRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, NOT_EXISTS, FAILURE, OUT_OF_LIMIT
    ErrorCode err_code = 1;
}


// Tag: GET_FENCE 0x0413 获取 Fence 列表
message GetFenceReqMsg {
    string deviceId = 1;
    // 获取单个 Fence 时填写正确的 Fence ID；若为空，表示全部 Fence 信息
    repeated string fence_id = 2;
    // 每页个数
    uint32 page_size = 3;
    // 页号
    uint32 page_idx = 4;
}

message GetFenceRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS(取单个 Fence 时会有此错误)
    ErrorCode err_code = 1;
    // Fence 列表
    repeated Fence fence = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // Fence 个数限制
    int32 count_limit = 5;
}


// Tag: ON_DEV_FENCE_CHANGED 0x0414 通知 Fence 信息有变更
message NotifyFenceChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID
    string  changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        repeated Fence fence = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyFenceChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/******************************** 围栏配置 end *******************************/

/******************************** 地图 begin ******************************/

// Tag: LOCATION 0x0501 设备端上传当前定位
message LocationReqMsg {
    // 位置信息
    Location location = 1;
}

message LocationRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
}


// 0x0502, 0x0503, 0x0504 流水号相同
//
// Tag: LOCATE_S1 0x0502 手机端获取当前定位S1
message LocateS1ReqMsg {
    // 设备号
    string deviceId = 1;
}

message LocateS1RspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, OFFLINE
    ErrorCode err_code = 1;
}

// Tag: LOCATE_S2 0x0503 手机端获取当前定位S2
message LocateS2ReqMsg {
    // 发起者 user ID
    string originator = 1;
}

message LocateS2RspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code    = 1;
    // 定位位置信息
    Location    location    = 2;
    // 发起者 user ID
    string      originator  = 3;
}

// Tag: LOCATE_S3 0x0504 手机端获取当前定位S3
message LocateS3ReqMsg {
    // 设备号
    string   deviceId = 1;
    // 定位位置信息
    Position position = 2;
    // 设备运动状态
    Movement movement = 3;
}

message LocateS3RspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: QUERY_DAYS_LOCATION 0x0505 查询有定位数据的日期
message QueryDaysLocationReqMsg {
    // 设备ID
    string deviceId     = 1;
    // 起始时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64  start_time   = 2;
    // 终止时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64  stop_time    = 3;
}

message QueryDaysLocationRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode       err_code    = 1;
    // 设备ID
    string          deviceId    = 2;
    // 成功时有效,有定位数据的日期   形如"2017-08-01"
    repeated string days        = 3;
}


// Tag: QUERY_LOCATIONS_IN_TIME_SEGMENT 0x0506 获取某个时间段的历史轨迹
message QueryTimeSegmentLocationReqMsg {
    // 设备ID
    string deviceId    = 1;
    // 起始时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64  start_time  = 2;
    // 终止时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64  stop_time   = 3;
}

message QueryTimeSegmentLocationRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode               err_code  = 1;
    // 设备号
    string                  deviceId  = 2;
    // 位置以及设备事件信息
    repeated PositionRecord positions = 3;
    // 卫星定位位置点合并距离
    double satellite_merge_distance   = 4;
    // WiFi基站定位位置点合并距离
    double wifi_merge_distance        = 5;
    // 蜂窝基站定位位置点合并距离
    double cell_merge_distance        = 6;
}


// Tag: CHECK_DEVICE_ONLINE 0x0507 查询设备是否在线
message CheckDeviceOnlineReqMsg {
    // 设备号
    repeated string deviceId = 1;
}

message CheckDeviceOnlineRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode             err_code = 1;
    repeated DeviceOnline online   = 2;
}


// Tag: ON_DEVICE_ONLINE_STATUS 0x0508 设备上线/下线通知
message NotifyOnlineStatusOfDevReqMsg {
    // 设备号
    string deviceId = 1;
    // 在线状态，ture 为在线
    bool   online   = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64  time     = 3;
}

message NotifyOnlineStatusOfDevRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code    = 1;
}


// Tag: ON_DEVICE_POSITION 0x050A 通知 APP 手表新的定位信息
message NotifyDevicePositionReqMsg {
    // 设备号
    string   deviceId = 1;
    // 位置信息
    Position position = 2;
    // 通知时间 (Epoch)
    int64    time     = 3;
    // 设备运动状态
    Movement movement = 4;
}

message NotifyDevicePositionRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: FETCH_DEVICE_LOCATION 0x050B 查询手表最新位置
message GetDeviceLastPositionReqMsg {
    // 设备号
    string deviceId = 1;
}

message GetDeviceLastPositionRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
    // 位置信息
    Position  position = 3;
    // 设备运动状态
    Movement  movement = 4;
}


// Tag: GET_LOCATION_MODE 0x0510 查询手表定位模式
message GetLocationModeReqMsg {
    // 设备号
    string deviceId = 1;
}

message GetLocationModeRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
    // 定位模式
    LocationMode location_mode = 2;
    // 定位频率（间隔），单位：秒
    int32 location_freq = 3;
}


// Tag: MODIFY_LOCATION_MODE 0x0511 修改设备定位模式
message ModifyLocationModeReqMsg {
    // 设备号
    string deviceId = 1;
    // 定位模式
    LocationMode location_mode = 2;
    // 定位频率（间隔），单位：秒
    // 目前未实现，设置无效
    int32 location_freq = 3;
}

message ModifyLocationModeRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: ON_LOCATION_MODE_CHANGED 0x0512 定位模式有变动
message NotifyLocationModeChangedReqMsg {
    // 设备号
    string deviceId = 1;
    // 修改人的 ID （userId，或 deviceId）
    string changer = 2;
    // 通知时间 Epoch
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64 time = 3;

    // 定位模式
    LocationMode location_mode = 4;
    // 定位频率（间隔），单位：秒
    int32 location_freq = 5;
}

message NotifyLocationModeChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/************************************ 地图 End ******************************/

/************************************ 手表发生重要事件 begin ******************************/

// 0x0600, 0x0601 流水号相同
//
// Tag: DEVICE_INCIDENT 0x0600 手表发生重要事件
// 手表上传
message DeviceIncidentReqMsg {
    // 定位信息
    Location location = 1;
    // 事件
    Incident incident = 2;
}

message DeviceIncidentRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, INVALID_PARAM
    ErrorCode err_code = 1;
}


// Tag: ON_DEVICE_INCIDENT 0x0601 服务器通知手表事件到 APP，围栏事件也使用该接口
// 围栏事件的流水号可能与 Tag: LOCATION 0x0501 的相同
message NotifyIncidentReqMsg {
    // 设备号
    string      deviceId    = 1;
    // 位置信息
    Position    position    = 2;
    // 事件
    Incident    incident    = 3;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64       time        = 4;
}

message NotifyIncidentRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/************************************ 手表发生重要事件 End ******************************/


/************************************ 短信代收 begin ******************************/

// Tag: SMS_AGENT_REPORT_SMS 0x0610 代收短息：手表收到短信后，报告给服务器
message SMSAgentReportNewReqMsg {
    // 短息数据
    // id、server_save_time 不填
    SMS sms = 1;
}

message SMSAgentReportNewRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, INVALID_PARAM
    ErrorCode err_code = 1;
}


// Tag: SMS_AGENT_SWITCH 0x0618 代收短息：APP 接收短信开关
message SMSAgentSwitchReqMsg {
    // 设备号
    string deviceId = 1;
    // 是否启用
    bool enable = 2;
}

message SMSAgentSwitchRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, INVALID_PARAM, NOT_EXISTS（未与设备绑定）
    ErrorCode err_code = 1;
}


// Tag: SMS_AGENT_GET_SWITCH_STATUS 0x0619 代收短息：APP 获取开关状态
message SMSAgentGetSwitchStatusReqMsg {
    // 设备号
    string deviceId = 1;
}

message SMSAgentGetSwitchStatusRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS（未与设备绑定）
    ErrorCode err_code = 1;
    // 是否启用
    bool enabled = 2;
}


// Tag: SMS_AGENT_GET 0x061A 代收短息：APP 查询历史短信
message SMSAgentGetReqMsg {
    // 设备号
    string deviceId = 1;
    // 每页个数
    uint32 page_size = 2;
    // 页号
    uint32 page_idx = 3;
}

message SMSAgentGetRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NO_PERMISSION（例如未绑定设备）
    ErrorCode err_code = 1;
    // 是否启用
    bool enabled = 2;

    // SMS 列表
    repeated SMS sms = 4;
    // 页号
    uint32 page_idx = 5;
    // 总页数
    uint32 page_total = 6;
}


// Tag: SMS_AGENT_ON_NEW_SMS 0x061B 代收短信：有新短信到达
message NotifySMSAgentNewSMSReqMsg {
    // 设备号
    string deviceId = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64 time = 2;
    // SMS 内容
    SMS sms = 3;
}

message NotifySMSAgentNewSMSRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/************************************ 短信代收 End ******************************/

/******************************** 时间同步 begin ******************************/

// Tag: SYNC_TIME 0x0700 时间同步
message SyncTimeReqMsg {
    Location  location  = 1;
}

message SyncTimeRspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code        = 1;
    // 时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64       time_seconds    = 2;
    // 时区
    Timezone    timezone        = 3;
}

/************************************ 时间同步 End ******************************/

/******************************** 天气 begin ******************************/

// Tag: GET_WEATHER 0x0710 获取天气信息
message GetWeatherReqMsg {
    Location location = 1;
    // 语言。lang-country code (参考 ISO 639 标准)
    string language = 2;
}

// 天气
message Weather {
    string city = 1;
    // 天气描述: 晴天
    string desc = 2;
    enum Code {
        // Tornado 龙卷风
        TORNADO = 0;
        // Tropical storm 热带风暴
        TROPICAL_STORM = 1;
        // Hurricane 飓风
        HURRICANE = 2;
        // Severe thunderstorms 严重的雷暴
        SEVERE_THUNDERSTORMS = 3;
        // Thunderstorm 雷暴
        THUNDERSTORM = 4;
        // Mixed rain and snow 混合雨雪
        MIXED_RAIN_AND_SNOW = 5;
        // Mixed rain and hail 混合降雨和冰雹
        MIXED_RAIN_AND_HAIL = 6;
        // Mixed snow and sleet 混合雪和雨夹雪
        MIXED_SNOW_AND_SLEET = 7;
        // Freezing drizzle 冻结小雨
        FREEZING_DRIZZLE = 8;
        // Light rain 小雨
        LIGHT_RAIN = 9;
        // Freezing rain 冻雨
        FREEZING_RAIN = 10;
        // Showery rain 阵雨
        SHOWERY_RAIN = 11;
        // Rain snow 雨飘雪
        RAIN_SNOW = 13;
        // Light snow showers 小雪阵雨
        LIGHT_SNOW_SHOWERS = 14;
        // Blowing snow 吹雪
        BLOWING_SNOW = 15;
        // Snow 雪
        SNOW = 16;
        // Hailstone 冰雹
        HAILSTONE = 17;
        // Rain and snow 雨夹雪
        RAIN_AND_SNOW = 18;
        // Dust 尘埃
        DUST = 19;
        // Fog 雾
        FOG = 20;
        // Haze 霾
        HAZE = 21;
        // Black smoke 黑烟
        BLACK_SMOKE = 22;
        // Heavy wind 大风
        HEAVY_WIND = 23;
        // Wind 风
        WIND = 24;
        // Low temperature 低温
        LOW_TEMP = 25;
        // Cloudy 多云
        CLOUDY = 26;
        // Cloudy(night) 多云
        NIGHT_CLOUDY_ = 27;
        // Cloudy(day) 多云
        DAY_CLOUDY = 28;
        // Partly cloudy (night) 局部多云
        NIGHT_PARTLY_CLOUDY = 29;
        // Partly cloudy (day) 局部多云
        DAY_PARTLY_CLOUDY = 30;
        // Relaxed (night) 清爽
        NIGHT_RELAXED = 31;
        // Sunshine 晴天
        SUNSHINE = 32;
        // Sunny (night) 晴朗
        NIGHT_SUNNY = 33;
        // Sunny (day) 晴朗
        DAY_SUNNY = 34;
        // Hot 热
        HOT = 36;
        // Partly thunderstorm 局部地区性雷暴
        PARTLY_THUNDERSTORM = 37;
        // Scattered thunderstorms 零星雷暴
        SCATTERED_THUNDERSTORMS = 38;
        // Scattered showery rain 零星阵雨
        SCATTERED_SHOWERY_RAIN = 40;
        // Heavy snow 大雪
        HEAVY_SNOW = 41;
        // Scattered snow showers 零星阵雪
        SCATTERED_SNOW_SHOWERS = 42;
        // Thundershower 雷阵雨
        THUNDERSHOWER = 45;
        // Snow shower 阵雪
        SNOW_SHOWER = 46;
        // Partly shower rain 局部雷阵雨
        PARTLY_SHOWER_RAIN = 47;
        // Overcast 阴
        OVERCAST = 48;
        // Partly cloudy 局部多云
        PARTLY_CLOUDY = 49;
        // Rain 雨
        RAIN = 50;
        // Drizzle 毛毛雨：
        DRIZZLE = 51;
        // moderate rain 中雨
        MODERATE_RAIN = 52;
        // Drencher 大雨
        DRENCHER = 53;
        // Rainstorm 暴雨
        RAINSTORM = 54;
        // Heavy rainstorm 特大暴雨
        HEAVY_RAINSTORM = 55;
        // Light snow 小雪
        LIGHT_SNOW = 56;
        // Moderate snow 中雪
        MODERATE_SNOW = 57;
        // Blizzard 暴雪
        BLIZZARD = 58;
        // Whirlwind 飑
        WHIRLWIND = 59 ;
        // Light fog 轻雾
        LIGHT_FOG = 60;
        // Sand 扬沙
        SAND = 61;
        // Sandstorm 沙尘暴
        SANDSTORM = 62;
        // Strong sandstorm 强沙尘暴
        STRONG_SANDSTORM = 63;
    }
    // 天气描述: 编码
    Code code = 3;

    // 当前温度 摄氏度
    float  temp = 4;

    // 预报，包括当天的天气
    message Forecast {
        // 日期 2018-04-09
        string date = 1;

        // 白天天气描述: 晴天
        string dayDesc = 3;
        // 白天天气描述: 编码
        Code dayCode = 4;
        // 夜晚天气描述: 晴天
        string nightDesc = 5;
        // 夜晚天气描述: 编码
        Code nightCode = 6;

        // 白天温度 摄氏度
        float tempMax = 7;
        // 晚上温度 摄氏度
        float tempMin = 8;
        // 平均温度
        float tempAvg = 9;

        // 湿度
        float humidityMax = 10;
        float humidityMin = 11;
        float humidityAvg = 12;

        // 空气质量指数
        float aqiMax = 13;
        float aqiMin = 14;
        float aqiAvg = 15;

        // PM2.5
        float pm25Max = 16;
        float pm25Min = 17;
        float pm25Avg = 18;
    }
    repeated Forecast forecast = 7;

    // 相对湿度
    float humidity = 8;
    // 空气质量指数
    float aqi = 9;
    // PM2.5
    float pm25 = 10;
    // PM10
    float pm10 = 11;
    // O3
    float o3 = 12;
    // CO
    float co = 13;
    // SO2
    float so2 = 14;
    // NO2
    float no2 = 15;
}

message GetWeatherRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE
    ErrorCode err_code = 1;
    Weather weather = 3;
}

/************************************ 天气 End ******************************/

/************************************ 手表交友 End ******************************/

// 手表好友
message Friend {
    // 好友 ID
    string id = 2;

    // 自己设备号
    string deviceId = 1;

    // 对方设备号
    string peer_deviceId = 3;
    // 对方所对应的宝贝名称
    string peer_baby_name = 4;
    // 对方的宝贝头像
    string peer_baby_avatar = 12;
    // 对方号码
    string peer_tel_num = 5;

    // 对方的好友昵称
    string peer_nickname = 8;

    // 对方的亲情短号
    string peer_family_short_num = 10;
}

// Tag: MAKE_FRIENDS 0x0780 手表发起交友请求
message MakeFriendsReqMsg {
    // 设备号
    string deviceId = 1;
    // 位置信息
    Location location = 2;
    // 时间
    int64 timestamp = 3;
}

message MakeFriendsRspMsg {
    // SUCCESS, INVALID_PARAM, FAILURE, NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: DEL_FRIEND 0x0781 删除好友
message DelFriendReqMsg {
    // 设备号
    string deviceId = 1;
    message PeerDeviceIdList {
        repeated string peer_dev_id = 1;
    }
    message FriendIdList {
        repeated string friend_id = 1;
    }
    oneof mode {
        // 以对方设备号方式删除
        PeerDeviceIdList peer_dev_id = 2;
        // 以 friend_id 方式删除
        FriendIdList friend_id = 3;
    }
}

message DelFriendRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, NOT_EXISTS, FAILURE
    // NO_PERMISSION 设备请求的 friend_id 所对应的好友关系不是他的。
    ErrorCode err_code = 1;
}


// Tag: GET_FRIEND 0x0782 获取好友
message GetFriendReqMsg {
    // 设备号
    string deviceId = 1;

    // 好友的设备 ID
    message PeerDeviceIDs {
        repeated string peer_dev_id = 1;
    }
    // 好友编号
    message FriendIdList {
        repeated string friend_id = 1;
    }
    // 模式，不填写时，返回所有好友信息
    oneof mode {
        PeerDeviceIDs peer_dev_id = 2;
        FriendIdList friend_id = 3;
    }

    // 每页个数
    uint32 page_size = 4;
    // 页号
    uint32 page_idx = 5;
}

message GetFriendRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, NOT_EXISTS, FAILURE
    ErrorCode err_code = 1;
    // 好友信息
    repeated Friend friend = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // 好友个数限制
    int32 count_limit = 5;
}


// Tag: ON_FRIEND_CHANGED 0x0483 通知好友信息有变动
message NotifyFriendChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 Epoch
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            // 好友建立
            ADD = 1;
            // 好友删除
            DEL = 2;
            // 好友信息变动
            MODIFY = 3;
        }
        Action action = 1;
        Friend friend = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyFriendChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: MODIFY_FRIEND_NICKNAME 0x0484 修改好友昵称
message ModifyFriendNicknameReqMsg {
    // 自己的设备号（家长自己孩子的设备号）
    string deviceID = 1;
    // 好友信息
    oneof friend {
        // 好友ID
        string friend_id = 2;
        // 好友设备号
        string friend_device_id = 3;
    }
    // 新昵称
    string nickname = 4;
}

message ModifyFriendNicknameRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, NOT_EXISTS(不存在此好友)
    ErrorCode err_code = 1;
}


// Tag: MODIFY_FRIEND_FAMILY_SHORT_NUM 0x0485 修改好友短号/亲情号
message ModifyFriendFamilyShortNumReqMsg {
    // 自己的设备号（家长自己孩子的设备号）
    string deviceID = 1;
    // 好友信息
    oneof friend {
        // 好友ID
        string friend_id = 2;
        // 好友设备号
        string friend_device_id = 3;
    }
    // 新亲情短号
    string number = 4;
}

message ModifyFriendFamilyShortNumRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, NOT_EXISTS(不存在此好友)
    ErrorCode err_code = 1;
}

/************************************ 手表交友 End ******************************/

/******************************** 设备端命令码 begin ******************************/

// Tag: ACTIVATE_DEVICE 0x0800 设备端激活
message ActivateReqMsg {
    // 设备号
    string deviceId = 1;
    // 设备型号（与 DeviceSysInfo 里的 model 意义一致）
    string model    = 2;
}

message ActivateRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: GET_QRC 0x0801 获取设备二维码
message GetQrcReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 支持的文件类型  0:jpg  1:png  2:gif  3:bmp
    int32   file_type   = 2;
    // 二维码图片宽度和高度，二者相等，单位：像素
    int32   size        = 3;
}

message GetQrcRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode   err_code    = 1;
    // 二维码图片
    bytes       qrc         = 2;
}


// Tag: DEV_REPORT_TEL_NUM 0x0802 设备上传电话号码
message DevReportTelNumReqMsg {
    // 设备号
    string deviceId = 1;
    // 电话号码
    string tel_num = 2;
}

message DevReportTelNumRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode err_code = 1;
}

/****************************** 设备端命令码 End ****************************/

/******************************** 查找手表 begin ******************************/

// 0x0900 0x0901 0x0902 流水号相同
//
// Tag: FIND_DEVICE_S1 0x0900 查找手表S1
message FindDeviceS1ReqMsg {
    // 设备号
    string deviceId = 1;
}

message FindDeviceS1RspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, OFFLINE, INVALID_PARAM, INACTIVATED
    ErrorCode err_code = 1;
}

// Tag: FIND_DEVICE_S2 0x0901 查找手表S2
message FindDeviceS2ReqMsg {
    //发起者
    string originator = 1;
}

message FindDeviceS2RspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code    = 1;
    // 发起者 user ID
    string      originator  = 2;
}

// Tag: FIND_DEVICE_S3 0x0902 查找手表S3
message FindDeviceS3ReqMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

message FindDeviceS3RspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 查找手表 End ****************************/

/****************************** 设备挂失 End ****************************/

// Tag: REPORT_DEVICE_LOSS 0x0903 挂失
// APP 发给服务器，服务器发给设备，设备收到后发送 DeviceIncidentS1ReqMsg:REPORT_LOSS 事件
message ReportDeviceLossReqMsg {
    string deviceId = 1; // 设备号
}

message ReportDeviceLossRspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, NO_PERMISSION, INACTIVATED
    ErrorCode err_code = 1;
}

/****************************** 设备挂失 End ****************************/

/******************************** SOS设置 begin ******************************/

// Tag: ADD_SOS 0x0420 添加 Sos
message AddSosReqMsg {
    string deviceId = 1;
    // Sos 的 id 不用填写，服务器会忽略 id，添加成功后正确的 id 在回响中携带
    repeated SOS sos = 2;
}

message AddSosRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, OUT_OF_LIMIT, SUCCESS, INACTIVATED
    ErrorCode err_code = 1;
    // 添加成功后的 Sos 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 Sos id）
    repeated SOS sos = 2;
}


// Tag: DEL_SOS 0x0421 删除 Sos
message DelSosReqMsg {
    string deviceId = 1;
    // Sos 的 id
    repeated string sos_id = 2;
}

message DelSosRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, NOT_EXISTS, SUCCESS, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: MODIFY_SOS 0x0422 修改 Sos
message ModifySosReqMsg {
    string deviceId = 1;
    repeated SOS sos = 2;
}

message ModifySosRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, NOT_EXISTS, OUT_OF_LIMIT, SUCCESS, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: GET_SOS 0x0423 获取 Sos 列表
message GetSosReqMsg {
    string deviceId = 1;
    // 获取单个 Sos 时填写正确的 Sos ID；若为空，表示全部 Sos
    repeated string sos_id = 2;
    // 每页个数
    uint32 page_size = 3;
    // 页号
    uint32 page_idx = 4;
}

message GetSosRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, NOT_EXISTS(取单个 Sos 时会有此错误), SUCCESS, INACTIVATED
    ErrorCode err_code = 1;
    // Sos 列表
    repeated SOS sos = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // Sos 个数限制
    int32 count_limit = 5;
}


// Tag: ON_DEV_SOS_CHANGED 0x0424 通知 Sos 信息有变更
message NotifySosChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64  time         = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        repeated SOS sos = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifySosChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_DEV_SOS_SYNCED 0x0425 通知 APP 手表已同步了 Sos 信息
message NotifySosSyncedReqMsg {
    // 设备ID
    string deviceId    = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64  time        = 2;
    // SOS ID
    repeated string sos_id = 3;
}

message NotifySosSyncedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: CHANGE_SOS_CALL_ORDER 0x0426 调整 SOS 号码拨号顺序
message ChangeSosCallOrderReqMsg {
    // 设备ID
    string deviceId = 1;
    // 已排好序的 SOS ID 列表
    repeated string ordered_sos_id = 2;
}

message ChangeSosCallOrderRspMsg {
    // INVALID_PARAM, FAILURE, NO_DEVICE, SUCCESS, DATA_CONFLICT
    ErrorCode err_code = 1;
}


// Tag: ON_SOS_CALL_ORDER_CHANGED 0x0427 SOS 号码顺序已被修改
message NotifySosCallOrderChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64  time         = 3;
}

message NotifySosCallOrderChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** SOS设置 End ****************************/

/****************************** 手表传感器数据 begin ****************************/

// 0x0906 0x0907 0x0908 流水号相同
//
// Tag: FETCH_DEVICE_SENSOR_DATA_S1 0x0906 查询手表传感器数据S1
message  FetchDeviceSensorDataS1ReqMsg {
    // 设备号 device ID
    string  deviceId    = 1;
    // 发起者 user ID
    string  originator  = 2;
}

message  FetchDeviceSensorDataS1RspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, OFFLINE, INVALID_PARAM, INACTIVATED
    ErrorCode err_code = 1;
}

// Tag: FETCH_DEVICE_SENSOR_DATA_S2 0x0907 查询手表传感器数据S2
message  FetchDeviceSensorDataS2ReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 发起者
    string  originator  = 2;
}

message  FetchDeviceSensorDataS2RspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode        err_code   = 1;
    // 传感器数据
    DeviceSensorData data       = 2;
    // 发起者
    string           originator = 3;
}

// Tag: FETCH_DEVICE_SENSOR_DATA_S3 0x0908 查询手表传感器数据S3
message  FetchDeviceSensorDataS3ReqMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode err_code = 1;
    // 设备信息
    DeviceSensorData data = 2;
}

message  FetchDeviceSensorDataS3RspMsg {
    // SUCCESS(表示收到消息)
    ErrorCode err_code = 1;
}


// Tag: DEVICE_REPORT_SENSOR_DATA 0x0909 报告手表相关信息
message DeviceReportSensorDataReqMsg {
    // 设备号
    string deviceId = 1;
    // 设备状态信息
    DeviceSensorData data = 2;

    // 附加信息
    message AdditionalInfo {
        // 蜂窝网络信号
        double cell_rssi = 1;
        // WiFi 信号
        double wifi_rssi = 2;

    }
    AdditionalInfo status_info = 3;
}

message DeviceReportSensorDataRspMsg {
    // SUCCESS FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_DEVICE_SENSOR_DATA 0x090A 手表相关信息通知
message NotifyDeviceSensorDataReqMsg {
    // 设备号
    string deviceId = 1;
    // 设备状态信息
    DeviceSensorData data = 2;
    // 通知时间 (Epoch)
    int64 time = 3;
}

message NotifyDeviceSensorDataRspMsg {
    // SUCCESS FAILURE
    ErrorCode err_code = 1;
}


// Tag: GET_LAST_DEVICE_SENSOR_DATA 0x090B 查询手表最新相关信息
message GetLastDeviceSensorDataReqMsg {
    // 设备号
    string deviceId = 1;
}

message GetLastDeviceSensorDataRspMsg {
    // SUCCESS FAILURE NO_DEVICE, INACTIVATED
    ErrorCode err_code = 1;
    // 设备状态信息
    DeviceSensorData data = 2;
    // 设备报告时间 (Epoch)
    int64 reportTime = 3;
}

/****************************** 手表传感器数据 End ****************************/

/******************************** 联系人设置 begin ******************************/

// Tag: ADD_CONTACT 0x0430 添加 Contact
message AddContactReqMsg {
    string deviceId = 1;
    // Contact 的 id 不用填写，服务器会忽略 id，添加成功后正确的 id 在回响中携带
    repeated Contact contact = 2;
}

message AddContactRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
    // 添加成功后的 Contact 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 Contact id）
    repeated Contact contact = 2;
}


// Tag: DEL_CONTACT 0x0431 删除 Contact
message DelContactReqMsg {
    string deviceId = 1;
    // Contact 的 id
    repeated string contact_id = 2;
}

message DelContactRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: MODIFY_CONTACT 0x0432 修改 Contact
message ModifyContactReqMsg {
    string deviceId = 1;
    repeated Contact contact = 2;
}

message ModifyContactRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: GET_CONTACT 0x0433 获取 Contact 列表
message GetContactReqMsg {
    string deviceId = 1;
    // 获取单个 Contact 时填写正确的 Contact ID；若为空，表示全部 Contact 信息
    repeated string contact_id = 2;
    // 每页个数
    uint32 page_size = 3;
    // 页号
    uint32 page_idx = 4;
    // 返回结果中是否希望包括好友类型的联系人
    bool should_contain_friends = 5;
}

message GetContactRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS(取单个 Contact 时会有此错误)
    ErrorCode err_code = 1;
    // Contact 列表
    repeated Contact contact = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // Contact 个数限制
    int32 count_limit = 5;
}


// Tag: ON_DEV_CONTACT_CHANGED 0x0434 通知 Contact 信息有变更
message NotifyContactChangedReqMsg {
    // 设备号
    string deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64  time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        repeated Contact contact = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyContactChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_DEV_CONTACT_SYNCED 0x0435 通知 APP 手表已同步了 Contact 信息
message NotifyContactSyncedReqMsg {
    string deviceId = 1; // 设备ID
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64  time     = 2;
    // Contact
    repeated Contact contact = 3;
}

message NotifyContactSyncedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}



// Tag: MODIFY_USER_DEV_ASSOC 0x090C 修改用户与设备的关联信息
// 只能修改 权限、关系和头像，若需要修改头像，须将关系一起附带。
// 修改成功后，向被修改者发送 NotifyUsrDevAssocModifiedReqMsg 消息
// 对于设备，还需要发送 联系人 变动通知
message ModifyUsrDevAssocReqMsg {
    UsrDevAssoc usr_dev_assoc = 1;
}

message ModifyUsrDevAssocRspMsg {
    // SUCCESS, NOT_EXISTS(不存在相应的关联（绑定）关系)
    ErrorCode err_code = 1;
}


// Tag: ON_USR_DEV_ASSOC_MODIFIED 0x090D 通知相关用户：用户关联信息（权限、关系和头像）被修改
// 该关联信息被其他终端修改后才会收到通知
message NotifyUsrDevAssocModifiedReqMsg {
    UsrDevAssoc usr_dev_assoc = 1;
    // 修改人的 ID （userId，或 deviceId）
    string      changer       = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    int64       time          = 3;
}

message NotifyUsrDevAssocModifiedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 联系人设置 End ****************************/

/******************************** 手表拍照 begin ******************************/

// 0x0A01 0x0A02 0x0A03 流水号相同
//
// Tag: TAKE_PHOTO_S1 0x0A01 手表拍照S1
message TakePhotoS1ReqMsg {
    // 设备号
    string deviceId = 1;
}

message TakePhotoS1RspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, OFFLINE, INVALID_PARAM, INACTIVATED
    ErrorCode err_code = 1;
}

// Tag: TAKE_PHOTO_S2 0x0A02 手表拍照S2
message TakePhotoS2ReqMsg {
    string originator = 1; //发起者
}

message TakePhotoS2RspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code    = 1;
    // 发起者
    string      originator  = 2;
    // 图片文件名
    string      filename    = 3;
    // 图片大小
    int32       size        = 4;
}

// Tag: TAKE_PHOTO_S3 0x0A03 手表拍照S3
message TakePhotoS3ReqMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code    = 1;
    // 设备号
    string      deviceId    = 2;
    // 图片文件名
    string      filename    = 3;
    // 图片大小
    int32       size        = 4;
}

message TakePhotoS3RspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 手表拍照 End ****************************/

/******************************** 单向通话 begin ******************************/

//0x0A04 0x0A05 0x0A06 流水号相同
//
// Tag: SIMPLEX_CALL_S1 0x0A04 单向通话S1
message SimplexCallS1ReqMsg {
    // 设备号
    string deviceId  = 1;
    // 接听手表电话的手机号码
    string phone_num = 2;
}

message SimplexCallS1RspMsg {
    // SUCCESS, FAILURE, NO_DEVICE, OFFLINE, INVALID_PARAM, INACTIVATED
    ErrorCode err_code = 1;
}

// Tag: SIMPLEX_CALL_S2 0x0A05 单向通话S2
message SimplexCallS2ReqMsg {
    // 发起者
    string originator = 1;
    // 对手表来说的被叫电话号码
    string phone_num  = 2;
}

message SimplexCallS2RspMsg {
    // SUCCESS, FAILURE
    ErrorCode   err_code    = 1;
    // 发起者
    string      originator  = 2;
}

// Tag: SIMPLEX_CALL_S3 0x0A06 单向通话S3
message SimplexCallS3ReqMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

message SimplexCallS3RspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 单向通话 End ****************************/

/****************************** 设置闹钟 begin ****************************/

// Tag: ADD_ALARM_CLOCK 0x0440 添加 AlarmClock
message AddAlarmClockReqMsg {
    string deviceId = 1;
    // AlarmClock 的 id 不用填写，服务器会忽略 id，添加成功后正确的 id 在回响中携带
    repeated AlarmClock alarm_clock = 2;
}

message AddAlarmClockRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
    // 添加成功后的 AlarmClock 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 AlarmClock id）
    repeated AlarmClock alarm_clock = 2;
}


// Tag: DEL_ALARM_CLOCK 0x0441 删除 AlarmClock
message DelAlarmClockReqMsg {
    string deviceId = 1;
    // AlarmClock 的 id
    repeated string alarm_clock_id = 2;
}

message DelAlarmClockRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: MODIFY_ALARM_CLOCK 0x0442 修改 AlarmClock
message ModifyAlarmClockReqMsg {
    string deviceId = 1;
    repeated AlarmClock alarm_clock = 2;
}

message ModifyAlarmClockRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: GET_ALARM_CLOCK 0x0443 获取 AlarmClock 列表
message GetAlarmClockReqMsg {
    string deviceId = 1;
    // 获取单个 AlarmClock 时填写正确的 AlarmClock ID；若为空，表示全部 AlarmClock 信息
    repeated string alarm_clock_id = 2;
    // 每页个数
    uint32 page_size = 3;
    // 页号
    uint32 page_idx = 4;
}

message GetAlarmClockRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS(以 AlarmClock.id 获取时会有此错误)
    ErrorCode err_code = 1;
    // AlarmClock 列表
    repeated AlarmClock alarm_clock = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // AlarmClock 个数限制
    int32 count_limit = 5;
}


// Tag: ON_DEV_ALARM_CLOCK_CHANGED 0x0444 通知 AlarmClock 信息有变更
message NotifyAlarmClockChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        repeated AlarmClock alarm_clock = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyAlarmClockChangedRspMsg {
    ErrorCode err_code = 1;  // SUCCESS(表示收到消息)
}


// Tag: ON_DEV_ALARM_CLOCK_SYNCED 0x0445 通知 APP 手表已同步了 AlarmClock 信息
message NotifyAlarmClockSyncedReqMsg {
    // 设备ID
    string deviceId    = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64  time        = 2;
    // AlarmClock ID
    repeated string alarm_clock_id = 3;
}

message NotifyAlarmClockSyncedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 设置闹钟 End ****************************/

/****************************** 设置上课禁用 begin ****************************/

// Tag: ADD_CLASS_DISABLE 0x0450 添加 ClassDisable
message AddClassDisableReqMsg {
    string deviceId = 1;
    // ClassDisable 的 id 不用填写，服务器会忽略 id，添加成功后正确的 id 在回响中携带
    repeated ClassDisable class_disable = 2;
}

message AddClassDisableRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
    // 添加成功后的 ClassDisable 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 ClassDisable id）
    repeated ClassDisable class_disable = 2;
}


// Tag: DEL_CLASS_DISABLE 0x0451 删除 ClassDisable
message DelClassDisableReqMsg {
    string deviceId = 1;
    // ClassDisable 的 id
    repeated string class_disable_id = 2;
}

message DelClassDisableRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: MODIFY_CLASS_DISABLE 0x0452 修改 ClassDisable
message ModifyClassDisableReqMsg {
    string deviceId = 1;
    repeated ClassDisable class_disable = 2;
}

message ModifyClassDisableRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, NOT_EXISTS, FAILURE, OUT_OF_LIMIT, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: GET_CLASS_DISABLE 0x0453 获取 ClassDisable 列表
message GetClassDisableReqMsg {
    string deviceId = 1;
    // 获取单个 ClassDisable 时填写正确的 ClassDisable ID；若为空，表示全部 ClassDisable 信息
    repeated string class_disable_id = 2;
    // 每页个数
    uint32 page_size = 3;
    // 页号
    uint32 page_idx = 4;
}

message GetClassDisableRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS(取单个 ClassDisable 时会有此错误)
    ErrorCode err_code = 1;
    // ClassDisable 列表
    repeated ClassDisable class_disable = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
    // ClassDisable 个数限制
    int32 count_limit = 5;
}


// Tag: ON_DEV_CLASS_DISABLE_CHANGED 0x0454 通知 ClassDisable 信息有变更
message NotifyClassDisableChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        repeated ClassDisable class_disable = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyClassDisableChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_DEV_CLASS_DISABLE_SYNCED 0x0455 通知 APP 手表已同步了 ClassDisable 信息
message NotifyClassDisableSyncedReqMsg {
    // 设备ID
    string deviceId = 1;
    // 通知时间 (Epoch: in seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970, NOTE: is UTC)
    // 接收终端可以依据此时间判断是否需要处理
    int64 time = 2;
    repeated string class_disable_id = 3;
}

message NotifyClassDisableSyncedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 设置上课禁用 End ****************************/

/****************************** 上学守护 begin ****************************/

// 上学守护
message SchoolGuard {
    // 上学守护 ID
    string id = 1;
    // 上学守护 名称
    string name = 2;

    // 守护地址
    message Addr {
        Fence.Shape fence = 1;
        string addr = 2;
    }
    Addr school = 3;
    Addr home = 4;

    // 守护时段
    message Period {
        TimePoint start_time = 1;
        TimePoint end_time = 2;
    }
    // 上午守护时间
    Period forenoon = 5;
    // 下午守护时间
    Period afternoon = 6;
    // 最晚到家时间
    TimePoint go_home = 7;
    // 重复方式 bitmap 参考 Timepoint.RepeatFlag
    uint32 repeat = 8;
    // 该上学守护所使用的时区
    Timezone timezone = 9;
    // 法定节假日是否守护
    bool guard_during_holidays = 10;
    bool enable = 11;


    message Event {
        // 上学守护信息
        SchoolGuard guard = 1;

        enum Code {
            NONE = 0;
            // 到达学校（上课之前）
            ENTER_SCHOOL = 1;
            // 离开学校（上学期间/上课前半小时）
            LEAVE_SCHOOL = 2;
            // 回到学校（上学期间）
            BACK_SCHOOL = 3;
            // 还未到达学校（已到了上课时间）
            NOT_YET_REACH_SCHOOL = 4;
            // 已到家
            BACK_HOME = 5;
            // 还未到家（最晚到家时间之后）
            NOT_YET_REACH_HOME = 6;
        }
        // 具体事件
        Code code = 2;
    }
}

// Tag: GET_SCHOOL_GUARD 0x0460 获取上学守护
message GetSchoolGuardReqMsg {
    // 设备号
    string deviceId = 1;
    // 上学守护 ID, 若列表为空则取当前的上学守护（暂未使用）
    string guard_id = 2;
}

message GetSchoolGuardRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, NOT_EXISTS, INACTIVATED
    ErrorCode err_code = 1;
    SchoolGuard guard = 2;
}


// Tag: ADD_SCHOOL_GUARD 0x0461 添加上学守护
message AddSchoolGuardReqMsg {
    // 设备号
    string deviceId = 1;
    // SchoolGuard.id 不用填写。服务器会忽略 SchoolGuard.id 添加成功后在回响中携带
    SchoolGuard guard = 2;
}

message AddSchoolGuardRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, INACTIVATED
    ErrorCode err_code = 1;
    // 添加成功后的 SchoolGuard 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 SchoolGuard.id）
    SchoolGuard guard = 2;
}


// Tag: DEL_SCHOOL_GUARD 0x0462 删除上学守护
message DelSchoolGuardReqMsg {
    // 设备号
    string deviceId = 1;
    // 上学守护 ID
    string guard_id = 2;
}

message DelSchoolGuardRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, NOT_EXISTS, INACTIVATED
    ErrorCode err_code = 1;
}


// Tag: MODIFY_SCHOOL_GUARD 0x0463 修改上学守护
message ModifySchoolGuardReqMsg {
    // 设备号
    string deviceId = 1;
    // 除 id, repeat, guard_during_holidays, enable 外未变动的字段不用填写
    SchoolGuard guard = 2;
}

message ModifySchoolGuardRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, FAILURE, NOT_EXISTS, INACTIVATED
    ErrorCode err_code = 1;
    // 修改成功后完整的 SchoolGuard 信息
    SchoolGuard guard = 2;
}


// Tag: ON_SCHOOL_GUARD_CHANGED 0x0464 通知上学守护信息有变动
message NotifySchoolGuardChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 Epoch
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        Action action = 1;
        SchoolGuard guard = 2;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifySchoolGuardChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 上学守护 End ******************************/

/****************************** 集赞功能 begin ****************************/

// 集赞
message Praise {
    // 集赞 ID
    string id = 1;
    // 集赞名称 暂未使用
    string name = 2;
    message Item {
        // 集赞项 ID
        string id = 1;
        // 集赞项名称
        string name = 2;
        // 目标数 暂未使用
        uint32 goal = 3;
        // 已完成数 暂未使用
        uint32 reached = 4;
        // 今天是否已经点过赞
        bool praised = 5;
        // 是否已删除。修改集赞删除该项时，填写
        bool isDelete = 6;
    }
    // 任务列表
    repeated Item item = 3;
    // 总目标数
    uint32 total_goal = 4;
    // 已完成数
    uint32 total_reached = 5;
    // 奖品
    string prize = 6;
    // 截止时间 Epoch 目前未使用
    int64 deadline = 7;
    // 开始时间 Epoch。APP 创建成功后，有正确的值。
    int64 start_time = 8;
    // 完成时间 Epoch。 最有一个赞收集完成后，该字段有正确的值，否则为 0 。
    int64 complete_time = 9;
    // 结束时间 Epoch。 手表端点击“已收到奖励”后，该字段有正确的值，否则为 0 。可以使用该字段判断判断整个集赞任务是否结束
    int64 finish_time = 10;
    // 该集赞所使用的时区
    Timezone timezone = 11;
    // 是否被取消。 删除集赞时，填写
    bool isCancel = 12;
}

// Tag: ADD_PRAISE 0x0470 添加集赞
message AddPraiseReqMsg {
    // 设备号
    string deviceId = 1;
    // Praise.id, Praise.Item.id, Praise.start_time 不用填写。服务器会忽略 Praise.id, Praise.Item.id, Praise.start_time 添加成功后在回响中携带
    Praise praise = 2;
}

message AddPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, DATA_CONFLICT（已经存在了正在进行中的, 服务器会返回完整的 Praise 信息）
    ErrorCode err_code = 1;
    // 添加成功后的 Praise 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 Praise.id, Praise.Item.id, Praise.start_time 等）
    Praise praise = 2;
}


// Tag: DEL_PRAISE 0x0471 删除集赞
message DelPraiseReqMsg {
    // 设备号
    string deviceId = 1;
    // 集赞ID
    string praise_id = 2;
}

message DelPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS
    ErrorCode err_code = 1;
}


// Tag: MODIFY_PRAISE 0x0472 修改集赞
message ModifyPraiseReqMsg {
    // 设备号
    string deviceId = 1;
    // 未变动的字段不用填写；未变动的 Praise.Item 不用填写；新增的 Praise.Item.id 不用填写，添加成功后在回响中携带
    Praise praise = 2;
}

message ModifyPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS
    ErrorCode err_code = 1;
    // 修改成功后完整的 Praise 信息，APP 需要本地存储时应使用该值（服务器在里面填写了正确的 Praise.Item.id）
    Praise praise = 2;
}


// Tag: GET_PRAISE 0x0473 获取集赞
message GetPraiseReqMsg {
    // 设备号
    string deviceId = 1;

    // 某时间段内所有的集赞任务。若 start_time == end_time == 0 则取所有
    message Period {
        // 起始时间 Epoch
        int64 start_time = 1;
        // 终止时间 Epoch
        int64 end_time = 2;
    }
    // ID 获取。若列表为空则取所有
    message IDList {
        // 集赞 ID 列表
        repeated string praise_id = 1;
    }
    // 获取集赞的模式。若不填写，则取所有
    oneof mode {
        // 根据时间段获取
        Period period = 2;
        // 根据集赞 ID 获取
        IDList praise_id = 3;
    }

    // 每页个数
    uint32 page_size = 4;
    // 页号
    uint32 page_idx = 5;
}

message GetPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS
    ErrorCode err_code = 1;
    repeated Praise praise = 2;
    // 页号
    uint32 page_idx = 3;
    // 总页数
    uint32 page_total = 4;
}


// Tag: ON_PRAISE_CHANGED 0x0474 通知集赞信息有变动
message NotifyPraiseChangedReqMsg {
    // 设备号
    string  deviceId    = 1;
    // 修改人的 ID （userId，或 deviceId）
    string  changer     = 2;
    // 通知时间 Epoch
    // 接收终端可以依据此时间判断是否需要处理。终端可能已经拉取了最新数据，然后收到了旧的通知，就不需要再拉取数据
    int64   time        = 3;

    // 具体变动内容
    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
            // 点赞
            PRAISE = 4;
            // 集赞达成
            COMPLETE = 5;
            // 已收到奖品，集赞结束
            FINISH = 6;
            // 取消了集赞任务
            CANCELED = 7;
        }
        Action action = 1;
        Praise praise = 2;
        // 点赞的项
        repeated string praised_item_id = 3;
    }
    // 具体变动内容
    Detail detail = 4;
}

message NotifyPraiseChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: DO_PRAISE 0x0475 点赞
message DoPraiseReqMsg {
    // 设备号
    string deviceId = 1;
    // 只需填写 Praise.id 和 Praise.Task.id，服务器会忽略其他字段
    Praise praise = 2;
}

message DoPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS, ALREADY_CANCELED, ALREADY_FINISH,
    // DATA_CONFLICT (集赞任务已取消、已完成、已结束、子项已不存在)
    ErrorCode err_code = 1;
    // 点赞成功后完整的 Praise 信息
    Praise praise = 2;
}


// Tag: CANCEL_PRAISE 0x0476 取消集赞任务
message CancelPraiseReqMsg {
    // 设备号
    string deviceId = 1;
    // 集赞ID
    string praise_id = 2;
}

message CancelPraiseRspMsg {
    // INVALID_PARAM, SUCCESS, NO_DEVICE, INACTIVATED, FAILURE, NOT_EXISTS
    ErrorCode err_code = 1;
    // 取消成功后完整的 Praise 信息
    Praise praise = 2;
}


// Tag: PRIZE_OF_PRAISE_GOT 0x0477 设备发送：奖品已收到
message PrizeOfPraiseGotReqMsg {
    // 集赞ID
    string praise_id = 1;
}

message PrizeOfPraiseGotRspMsg {
    // SUCCESS
    ErrorCode err_code = 1;
}

/****************************** 集赞功能 End ****************************/

/****************************** 微聊 begin ****************************/

// Tag: ON_NEW_MICRO_CHAT_EMOTICON 0X0E01 接收微聊表情消息
// 新版本已废弃，注意兼容旧版本
message NotifyMicroChatEmoticonReqMsg {
    // 源地址
    TermAddr src_addr = 1;
    // 表情 ID
    string emoticon_id = 2;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 3;
}
// 新版本已废弃，注意兼容旧版本
message NotifyMicroChatEmoticonRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_NEW_MICRO_CHAT_VOICE 0x0E03 接收微聊语音消息
// 新版本已废弃，注意兼容旧版本
message NotifyMicroChatVoiceReqMsg {
    // 源地址
    TermAddr src_addr = 1;
    // 语音文件名
    string file_name = 2;
    // 文件大小，字节
    uint64 file_size = 4;
    // 语音时长 单位：秒
    int32  duration = 3;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 5;
}
// 新版本已废弃，注意兼容旧版本
message NotifyMicroChatVoiceRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: ON_NEW_MICRO_CHAT_TEXT 0X0E05 接收微聊文本消息
// 已废弃
message NotifyMicroChatTextReqMsg {
    // 源地址
    TermAddr src_addr = 1;
    // 文本
    string text = 2;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 3;
}
// 已废弃
message NotifyMicroChatTextRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: SEND_CHAT_MESSAGE 0x0E06 发送微聊消息
message SendChatMessageReqMsg {
    // 目的地址
    TermAddr dst = 1;
    // 具体消息
    ChatMessage msg = 2;
}

message SendChatMessageRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, NO_USER, NO_CHAT_GROUP, PEER_NOT_SUPPORTED
    ErrorCode err_code = 1;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 2;
}


// Tag: ON_NEW_CHAT_MESSAGE 0x0E07 接收微聊消息
message NotifyChatMessageReqMsg {
    // 发送者地址
    TermAddr src = 1;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 2;
    // 具体消息
    ChatMessage msg = 3;
}

message NotifyChatMessageRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: SEND_GROUP_CHAT_MESSAGE 0x0E10 发送群组微聊消息
message SendGroupChatMessageReqMsg {
    // 群组 ID
    string group_id = 1;
    // 具体消息
    ChatMessage msg = 2;
}

message SendGroupChatMessageRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_CHAT_GROUP
    ErrorCode err_code = 1;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 2;
}


// Tag: ON_NEW_GROUP_CHAT_MESSAGE 0X0E11 接收群组微聊消息
message NotifyGroupChatMessageReqMsg {
    // 群组 ID
    string group_id = 1;
    // 发送者地址
    TermAddr sender = 2;
    // 服务器时间戳，单位：纳秒
    int64 timestamp = 3;
    // 具体消息
    ChatMessage msg = 4;
    // 家庭群所对应的设备ID
    string deviceId = 5;
}

message NotifyGroupChatMessageRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}


// Tag: GET_FAMILY_GROUP_OF_CHAT 0x0E12 获取家庭群聊群组
message GetFamilyGroupOfChatReqMsg {
    // 设备号
    // 可以为空，为空时，查询自己所有的群组。
    string deviceId = 1;
    // 返回结果中是否希望包括群组成员信息
    // 否则，返回结果中只要群组的基本信息（group ID, group name)
    bool should_contain_member = 2;
}

message GetFamilyGroupOfChatRspMsg {
    // INVALID_PARAM, SUCCESS, FAILURE, NO_DEVICE, INACTIVATED, NO_CHAT_GROUP
    ErrorCode err_code = 1;

    message Group {
        // 群所属设备
        string deviceId = 1;
        // 群组信息
        ChatGroup group = 2;
    }
    // 群组信息
    repeated Group group = 2;
}


// Tag: ON_CHAT_GROUP_MEMBER_CHANGED 0x0E13 群组成员变动
message NotifyChatGroupMemberChangedReqMsg {
    // 群组 ID (UUID)
    string group_id = 1;

    message Detail {
        enum Action {
            NONE = 0;
            ADD = 1;
            DEL = 2;
            MODIFY = 3;
        }
        // 动作
        Action action = 1;
        // 成员信息
        // 删除时，具体内容里只有 deviceId 或 userId，其他字段可能未填写。
        ChatGroup.Member member = 2;
    }

    repeated Detail detail = 2;
}

message NotifyChatGroupMemberChangedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/****************************** 微聊 End ****************************/

/******************************** 文件传输 begin ******************************/

// Tag: FILE_UPLOAD_BEFORE 0x0F04 上传文件前协商请求
message FileUploadBeforeReqMsg {
    // 文件名
    string  filename    = 1;
    // 文件大小，字节；
    uint32  size        = 2;
    // 流水号
    string  seq         = 3;
    // 缓冲区长度，如4096表示4K
    uint32  bufsize     = 4;
    // 为以后扩展预留
    uint32  reserve     = 5;
}

message FileUploadBeforeRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode err_code = 1;
}


//Tag: FILE_UPLOAD 0x0F05 上传文件数据
message FileUploadReqMsg {
    // 当前包索引号
    uint32  index       = 1;
    // 文件数据
    bytes   data        = 2;
    // 数据长度
    uint32  data_len    = 3;
}

message FileUploadRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode   err_code    = 1;
    // 当前包索引号
    uint32      index       = 2;
}


// Tag: FILE_DOWNLOAD_BEFORE 0x0F06 下载文件前协商请求
message FileDownloadBeforeReqMsg {
    // 文件名
    string  filename    = 1;
    // 文件大小，字节；
    uint32  size        = 2;
    // 流水号
    string  seq         = 3;
    // 缓冲区长度，如4096表示4K
    uint32  bufsize     = 4;
    // 上传此文件的客户端
    string  src         = 5;
    // 为以后扩展预留
    uint32  reserve     = 6;
}

message FileDownloadBeforeRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode err_code = 1;
}

// Tag: FILE_DOWNLOAD 0x0F07 下载文件数据
message FileDownloadReqMsg {
    // 当前包索引号
    uint32 index = 1;
}

message FileDownloadRspMsg {
    // SUCCESS, FAILURE, INVALID_PARAM
    ErrorCode   err_code    = 1;
    // 当前包索引号
    uint32      index       = 2;
    // 文件数据
    bytes       data        = 3;
    // 数据长度
    uint32      data_len    = 4;
}

// Tag: FILE_TRANS_FINISH 0x0F08 文件传输完成通知
message FileFinishedReqMsg {
    // 文件名
    string  filename    = 1;
    // 文件大小，字节；
    uint32  size        = 2;
    // 流水号
    string  seq         = 3;
}

message FileFinishedRspMsg {
    // SUCCESS, FAILURE
    ErrorCode err_code = 1;
}

/************************************ 文件传输 End ******************************/
